ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"lwrb.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.lwrb_init,"ax",%progbits
  16              		.align	1
  17              		.global	lwrb_init
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	lwrb_init:
  25              	.LVL0:
  26              	.LFB0:
  27              		.file 1 "Src/lwrb.c"
   1:Src/lwrb.c    **** /**
   2:Src/lwrb.c    ****  * \file            lwrb.c
   3:Src/lwrb.c    ****  * \brief           Lightweight ring buffer
   4:Src/lwrb.c    ****  */
   5:Src/lwrb.c    **** 
   6:Src/lwrb.c    **** /*
   7:Src/lwrb.c    ****  * Copyright (c) 2020 Tilen MAJERLE
   8:Src/lwrb.c    ****  *
   9:Src/lwrb.c    ****  * Permission is hereby granted, free of charge, to any person
  10:Src/lwrb.c    ****  * obtaining a copy of this software and associated documentation
  11:Src/lwrb.c    ****  * files (the "Software"), to deal in the Software without restriction,
  12:Src/lwrb.c    ****  * including without limitation the rights to use, copy, modify, merge,
  13:Src/lwrb.c    ****  * publish, distribute, sublicense, and/or sell copies of the Software,
  14:Src/lwrb.c    ****  * and to permit persons to whom the Software is furnished to do so,
  15:Src/lwrb.c    ****  * subject to the following conditions:
  16:Src/lwrb.c    ****  *
  17:Src/lwrb.c    ****  * The above copyright notice and this permission notice shall be
  18:Src/lwrb.c    ****  * included in all copies or substantial portions of the Software.
  19:Src/lwrb.c    ****  *
  20:Src/lwrb.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  21:Src/lwrb.c    ****  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
  22:Src/lwrb.c    ****  * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
  23:Src/lwrb.c    ****  * AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  24:Src/lwrb.c    ****  * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  25:Src/lwrb.c    ****  * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  26:Src/lwrb.c    ****  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
  27:Src/lwrb.c    ****  * OTHER DEALINGS IN THE SOFTWARE.
  28:Src/lwrb.c    ****  *
  29:Src/lwrb.c    ****  * This file is part of LwRB - Lightweight ring buffer library.
  30:Src/lwrb.c    ****  *
  31:Src/lwrb.c    ****  * Author:          Tilen MAJERLE <tilen@majerle.eu>
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 2


  32:Src/lwrb.c    ****  * Version:         v2.0.0
  33:Src/lwrb.c    ****  */
  34:Src/lwrb.c    **** #include "lwrb.h"
  35:Src/lwrb.c    **** 
  36:Src/lwrb.c    **** /* Memory set and copy functions */
  37:Src/lwrb.c    **** #define BUF_MEMSET                      memset
  38:Src/lwrb.c    **** #define BUF_MEMCPY                      memcpy
  39:Src/lwrb.c    **** 
  40:Src/lwrb.c    **** #define BUF_MAGIC1                      (0xDEADBEEF)
  41:Src/lwrb.c    **** #define BUF_MAGIC2                      (~0xDEADBEEF)
  42:Src/lwrb.c    **** 
  43:Src/lwrb.c    **** #if LWRB_USE_MAGIC
  44:Src/lwrb.c    **** #define BUF_IS_VALID(b)                 ((b) != NULL && (b)->magic1 == BUF_MAGIC1 && (b)->magic2 ==
  45:Src/lwrb.c    **** #else
  46:Src/lwrb.c    **** #define BUF_IS_VALID(b)                 ((b) != NULL && (b)->buff != NULL && (b)->size > 0)
  47:Src/lwrb.c    **** #endif /* LWRB_USE_MAGIC */
  48:Src/lwrb.c    **** #define BUF_MIN(x, y)                   ((x) < (y) ? (x) : (y))
  49:Src/lwrb.c    **** #define BUF_MAX(x, y)                   ((x) > (y) ? (x) : (y))
  50:Src/lwrb.c    **** #define BUF_SEND_EVT(b, type, bp)       do { if ((b)->evt_fn != NULL) { (b)->evt_fn((b), (type), (b
  51:Src/lwrb.c    **** 
  52:Src/lwrb.c    **** /**
  53:Src/lwrb.c    ****  * \brief           Initialize buffer handle to default values with size and buffer data array
  54:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
  55:Src/lwrb.c    ****  * \param[in]       buffdata: Pointer to memory to use as buffer data
  56:Src/lwrb.c    ****  * \param[in]       size: Size of `buffdata` in units of bytes
  57:Src/lwrb.c    ****  *                      Maximum number of bytes buffer can hold is `size - 1`
  58:Src/lwrb.c    ****  * \return          `1` on success, `0` otherwise
  59:Src/lwrb.c    ****  */
  60:Src/lwrb.c    **** uint8_t
  61:Src/lwrb.c    **** lwrb_init(LWRB_VOLATILE lwrb_t* buff, void* buffdata, size_t size) {
  28              		.loc 1 61 68 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  62:Src/lwrb.c    ****     if (buff == NULL || buffdata == NULL || size == 0) {
  33              		.loc 1 62 5 view .LVU1
  34              		.loc 1 62 8 is_stmt 0 view .LVU2
  35 0000 0346     		mov	r3, r0
  36 0002 78B1     		cbz	r0, .L3
  37              		.loc 1 62 22 discriminator 1 view .LVU3
  38 0004 81B1     		cbz	r1, .L4
  39              		.loc 1 62 42 discriminator 2 view .LVU4
  40 0006 0AB9     		cbnz	r2, .L6
  63:Src/lwrb.c    ****         return 0;
  41              		.loc 1 63 16 view .LVU5
  42 0008 0020     		movs	r0, #0
  43              	.LVL1:
  64:Src/lwrb.c    ****     }
  65:Src/lwrb.c    **** 
  66:Src/lwrb.c    ****     BUF_MEMSET((void*)buff, 0x00, sizeof(*buff));
  67:Src/lwrb.c    **** 
  68:Src/lwrb.c    ****     buff->size = size;
  69:Src/lwrb.c    ****     buff->buff = buffdata;
  70:Src/lwrb.c    **** 
  71:Src/lwrb.c    **** #if LWRB_USE_MAGIC
  72:Src/lwrb.c    ****     buff->magic1 = BUF_MAGIC1;
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 3


  73:Src/lwrb.c    ****     buff->magic2 = BUF_MAGIC2;
  74:Src/lwrb.c    **** #endif /* LWRB_USE_MAGIC */
  75:Src/lwrb.c    **** 
  76:Src/lwrb.c    ****     return 1;
  77:Src/lwrb.c    **** }
  44              		.loc 1 77 1 view .LVU6
  45 000a 7047     		bx	lr
  46              	.LVL2:
  47              	.L6:
  66:Src/lwrb.c    **** 
  48              		.loc 1 66 5 is_stmt 1 view .LVU7
  49 000c 0020     		movs	r0, #0
  50              	.LVL3:
  66:Src/lwrb.c    **** 
  51              		.loc 1 66 5 is_stmt 0 view .LVU8
  52 000e D860     		str	r0, [r3, #12]	@ unaligned
  53 0010 1861     		str	r0, [r3, #16]	@ unaligned
  54 0012 5861     		str	r0, [r3, #20]	@ unaligned
  68:Src/lwrb.c    ****     buff->buff = buffdata;
  55              		.loc 1 68 5 is_stmt 1 view .LVU9
  68:Src/lwrb.c    ****     buff->buff = buffdata;
  56              		.loc 1 68 16 is_stmt 0 view .LVU10
  57 0014 9A60     		str	r2, [r3, #8]
  69:Src/lwrb.c    **** 
  58              		.loc 1 69 5 is_stmt 1 view .LVU11
  69:Src/lwrb.c    **** 
  59              		.loc 1 69 16 is_stmt 0 view .LVU12
  60 0016 5960     		str	r1, [r3, #4]
  72:Src/lwrb.c    ****     buff->magic2 = BUF_MAGIC2;
  61              		.loc 1 72 5 is_stmt 1 view .LVU13
  72:Src/lwrb.c    ****     buff->magic2 = BUF_MAGIC2;
  62              		.loc 1 72 18 is_stmt 0 view .LVU14
  63 0018 044A     		ldr	r2, .L7
  64              	.LVL4:
  72:Src/lwrb.c    ****     buff->magic2 = BUF_MAGIC2;
  65              		.loc 1 72 18 view .LVU15
  66 001a 1A60     		str	r2, [r3]
  73:Src/lwrb.c    **** #endif /* LWRB_USE_MAGIC */
  67              		.loc 1 73 5 is_stmt 1 view .LVU16
  73:Src/lwrb.c    **** #endif /* LWRB_USE_MAGIC */
  68              		.loc 1 73 18 is_stmt 0 view .LVU17
  69 001c 044A     		ldr	r2, .L7+4
  70 001e 9A61     		str	r2, [r3, #24]
  76:Src/lwrb.c    **** }
  71              		.loc 1 76 5 is_stmt 1 view .LVU18
  76:Src/lwrb.c    **** }
  72              		.loc 1 76 12 is_stmt 0 view .LVU19
  73 0020 0120     		movs	r0, #1
  74 0022 7047     		bx	lr
  75              	.LVL5:
  76              	.L3:
  63:Src/lwrb.c    ****     }
  77              		.loc 1 63 16 view .LVU20
  78 0024 0020     		movs	r0, #0
  79              	.LVL6:
  63:Src/lwrb.c    ****     }
  80              		.loc 1 63 16 view .LVU21
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 4


  81 0026 7047     		bx	lr
  82              	.LVL7:
  83              	.L4:
  63:Src/lwrb.c    ****     }
  84              		.loc 1 63 16 view .LVU22
  85 0028 0020     		movs	r0, #0
  86              	.LVL8:
  63:Src/lwrb.c    ****     }
  87              		.loc 1 63 16 view .LVU23
  88 002a 7047     		bx	lr
  89              	.L8:
  90              		.align	2
  91              	.L7:
  92 002c EFBEADDE 		.word	-559038737
  93 0030 10415221 		.word	559038736
  94              		.cfi_endproc
  95              	.LFE0:
  97              		.section	.text.lwrb_is_ready,"ax",%progbits
  98              		.align	1
  99              		.global	lwrb_is_ready
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 103              		.fpu softvfp
 105              	lwrb_is_ready:
 106              	.LVL9:
 107              	.LFB1:
  78:Src/lwrb.c    **** 
  79:Src/lwrb.c    **** /**
  80:Src/lwrb.c    ****  * \brief           Check if buff is initialized and ready to use
  81:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
  82:Src/lwrb.c    ****  * \return          `1` if ready, `0` otherwise
  83:Src/lwrb.c    ****  */
  84:Src/lwrb.c    **** uint8_t
  85:Src/lwrb.c    **** lwrb_is_ready(LWRB_VOLATILE lwrb_t* buff) {
 108              		.loc 1 85 43 is_stmt 1 view -0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 0, uses_anonymous_args = 0
 112              		@ link register save eliminated.
  86:Src/lwrb.c    ****     return BUF_IS_VALID(buff);
 113              		.loc 1 86 5 view .LVU25
 114              		.loc 1 86 12 is_stmt 0 view .LVU26
 115 0000 88B1     		cbz	r0, .L11
 116              		.loc 1 86 12 discriminator 1 view .LVU27
 117 0002 0168     		ldr	r1, [r0]
 118 0004 0B4A     		ldr	r2, .L18
 119 0006 9142     		cmp	r1, r2
 120 0008 01D0     		beq	.L16
 121              		.loc 1 86 12 view .LVU28
 122 000a 0020     		movs	r0, #0
 123              	.LVL10:
 124              		.loc 1 86 12 view .LVU29
 125 000c 7047     		bx	lr
 126              	.LVL11:
 127              	.L16:
 128              		.loc 1 86 12 discriminator 3 view .LVU30
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 5


 129 000e 8169     		ldr	r1, [r0, #24]
 130 0010 094A     		ldr	r2, .L18+4
 131 0012 9142     		cmp	r1, r2
 132 0014 01D0     		beq	.L17
 133              		.loc 1 86 12 view .LVU31
 134 0016 0020     		movs	r0, #0
 135              	.LVL12:
 136              		.loc 1 86 12 view .LVU32
 137 0018 7047     		bx	lr
 138              	.LVL13:
 139              	.L17:
 140              		.loc 1 86 12 discriminator 5 view .LVU33
 141 001a 4268     		ldr	r2, [r0, #4]
 142 001c 2AB1     		cbz	r2, .L14
 143              		.loc 1 86 12 discriminator 7 view .LVU34
 144 001e 8368     		ldr	r3, [r0, #8]
 145 0020 2BB9     		cbnz	r3, .L15
 146              		.loc 1 86 12 view .LVU35
 147 0022 0020     		movs	r0, #0
 148              	.LVL14:
 149              		.loc 1 86 12 view .LVU36
 150 0024 7047     		bx	lr
 151              	.LVL15:
 152              	.L11:
 153              		.loc 1 86 12 view .LVU37
 154 0026 0020     		movs	r0, #0
 155              	.LVL16:
 156              		.loc 1 86 12 view .LVU38
 157 0028 7047     		bx	lr
 158              	.LVL17:
 159              	.L14:
 160              		.loc 1 86 12 view .LVU39
 161 002a 0020     		movs	r0, #0
 162              	.LVL18:
 163              		.loc 1 86 12 view .LVU40
 164 002c 7047     		bx	lr
 165              	.LVL19:
 166              	.L15:
 167              		.loc 1 86 12 view .LVU41
 168 002e 0120     		movs	r0, #1
 169              	.LVL20:
  87:Src/lwrb.c    **** }
 170              		.loc 1 87 1 view .LVU42
 171 0030 7047     		bx	lr
 172              	.L19:
 173 0032 00BF     		.align	2
 174              	.L18:
 175 0034 EFBEADDE 		.word	-559038737
 176 0038 10415221 		.word	559038736
 177              		.cfi_endproc
 178              	.LFE1:
 180              		.section	.text.lwrb_free,"ax",%progbits
 181              		.align	1
 182              		.global	lwrb_free
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 6


 186              		.fpu softvfp
 188              	lwrb_free:
 189              	.LVL21:
 190              	.LFB2:
  88:Src/lwrb.c    **** 
  89:Src/lwrb.c    **** /**
  90:Src/lwrb.c    ****  * \brief           Free buffer memory
  91:Src/lwrb.c    ****  * \note            Since implementation does not use dynamic allocation,
  92:Src/lwrb.c    ****  *                  it just sets buffer handle to `NULL`
  93:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
  94:Src/lwrb.c    ****  */
  95:Src/lwrb.c    **** void
  96:Src/lwrb.c    **** lwrb_free(LWRB_VOLATILE lwrb_t* buff) {
 191              		.loc 1 96 39 is_stmt 1 view -0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              		@ link register save eliminated.
  97:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 196              		.loc 1 97 5 view .LVU44
 197              		.loc 1 97 8 is_stmt 0 view .LVU45
 198 0000 18B1     		cbz	r0, .L20
 199              		.loc 1 97 9 discriminator 1 view .LVU46
 200 0002 0168     		ldr	r1, [r0]
 201 0004 084A     		ldr	r2, .L23
 202 0006 9142     		cmp	r1, r2
 203 0008 00D0     		beq	.L22
 204              	.L20:
  98:Src/lwrb.c    ****         buff->buff = NULL;
  99:Src/lwrb.c    ****     }
 100:Src/lwrb.c    **** }
 205              		.loc 1 100 1 view .LVU47
 206 000a 7047     		bx	lr
 207              	.L22:
  97:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 208              		.loc 1 97 9 discriminator 2 view .LVU48
 209 000c 8169     		ldr	r1, [r0, #24]
 210 000e 074A     		ldr	r2, .L23+4
 211 0010 9142     		cmp	r1, r2
 212 0012 FAD1     		bne	.L20
  97:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 213              		.loc 1 97 9 discriminator 3 view .LVU49
 214 0014 4268     		ldr	r2, [r0, #4]
 215 0016 002A     		cmp	r2, #0
 216 0018 F7D0     		beq	.L20
  97:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 217              		.loc 1 97 9 discriminator 4 view .LVU50
 218 001a 8268     		ldr	r2, [r0, #8]
 219 001c 002A     		cmp	r2, #0
 220 001e F4D0     		beq	.L20
  98:Src/lwrb.c    ****         buff->buff = NULL;
 221              		.loc 1 98 9 is_stmt 1 view .LVU51
  98:Src/lwrb.c    ****         buff->buff = NULL;
 222              		.loc 1 98 20 is_stmt 0 view .LVU52
 223 0020 0022     		movs	r2, #0
 224 0022 4260     		str	r2, [r0, #4]
 225              		.loc 1 100 1 view .LVU53
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 7


 226 0024 F1E7     		b	.L20
 227              	.L24:
 228 0026 00BF     		.align	2
 229              	.L23:
 230 0028 EFBEADDE 		.word	-559038737
 231 002c 10415221 		.word	559038736
 232              		.cfi_endproc
 233              	.LFE2:
 235              		.section	.text.lwrb_set_evt_fn,"ax",%progbits
 236              		.align	1
 237              		.global	lwrb_set_evt_fn
 238              		.syntax unified
 239              		.thumb
 240              		.thumb_func
 241              		.fpu softvfp
 243              	lwrb_set_evt_fn:
 244              	.LVL22:
 245              	.LFB3:
 101:Src/lwrb.c    **** 
 102:Src/lwrb.c    **** /**
 103:Src/lwrb.c    ****  * \brief           Set event function callback for different buffer operations
 104:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 105:Src/lwrb.c    ****  * \param[in]       evt_fn: Callback function
 106:Src/lwrb.c    ****  */
 107:Src/lwrb.c    **** void
 108:Src/lwrb.c    **** lwrb_set_evt_fn(LWRB_VOLATILE lwrb_t* buff, lwrb_evt_fn evt_fn) {
 246              		.loc 1 108 65 is_stmt 1 view -0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 109:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 251              		.loc 1 109 5 view .LVU55
 252              		.loc 1 109 8 is_stmt 0 view .LVU56
 253 0000 0346     		mov	r3, r0
 254 0002 18B1     		cbz	r0, .L25
 255              		.loc 1 109 9 discriminator 1 view .LVU57
 256 0004 0068     		ldr	r0, [r0]
 257              	.LVL23:
 258              		.loc 1 109 9 discriminator 1 view .LVU58
 259 0006 084A     		ldr	r2, .L28
 260 0008 9042     		cmp	r0, r2
 261 000a 00D0     		beq	.L27
 262              	.L25:
 110:Src/lwrb.c    ****         buff->evt_fn = evt_fn;
 111:Src/lwrb.c    ****     }
 112:Src/lwrb.c    **** }
 263              		.loc 1 112 1 view .LVU59
 264 000c 7047     		bx	lr
 265              	.L27:
 109:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 266              		.loc 1 109 9 discriminator 2 view .LVU60
 267 000e 9869     		ldr	r0, [r3, #24]
 268 0010 064A     		ldr	r2, .L28+4
 269 0012 9042     		cmp	r0, r2
 270 0014 FAD1     		bne	.L25
 109:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 8


 271              		.loc 1 109 9 discriminator 3 view .LVU61
 272 0016 5A68     		ldr	r2, [r3, #4]
 273 0018 002A     		cmp	r2, #0
 274 001a F7D0     		beq	.L25
 109:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 275              		.loc 1 109 9 discriminator 4 view .LVU62
 276 001c 9A68     		ldr	r2, [r3, #8]
 277 001e 002A     		cmp	r2, #0
 278 0020 F4D0     		beq	.L25
 110:Src/lwrb.c    ****         buff->evt_fn = evt_fn;
 279              		.loc 1 110 9 is_stmt 1 view .LVU63
 110:Src/lwrb.c    ****         buff->evt_fn = evt_fn;
 280              		.loc 1 110 22 is_stmt 0 view .LVU64
 281 0022 5961     		str	r1, [r3, #20]
 282              		.loc 1 112 1 view .LVU65
 283 0024 F2E7     		b	.L25
 284              	.L29:
 285 0026 00BF     		.align	2
 286              	.L28:
 287 0028 EFBEADDE 		.word	-559038737
 288 002c 10415221 		.word	559038736
 289              		.cfi_endproc
 290              	.LFE3:
 292              		.section	.text.lwrb_get_free,"ax",%progbits
 293              		.align	1
 294              		.global	lwrb_get_free
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 298              		.fpu softvfp
 300              	lwrb_get_free:
 301              	.LVL24:
 302              	.LFB7:
 113:Src/lwrb.c    **** 
 114:Src/lwrb.c    **** /**
 115:Src/lwrb.c    ****  * \brief           Write data to buffer.
 116:Src/lwrb.c    ****  * Copies data from `data` array to buffer and marks buffer as full for maximum `btw` number of byt
 117:Src/lwrb.c    ****  *
 118:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 119:Src/lwrb.c    ****  * \param[in]       data: Pointer to data to write into buffer
 120:Src/lwrb.c    ****  * \param[in]       btw: Number of bytes to write
 121:Src/lwrb.c    ****  * \return          Number of bytes written to buffer.
 122:Src/lwrb.c    ****  *                      When returned value is less than `btw`, there was no enough memory availabl
 123:Src/lwrb.c    ****  *                      to copy full data array
 124:Src/lwrb.c    ****  */
 125:Src/lwrb.c    **** size_t
 126:Src/lwrb.c    **** lwrb_write(LWRB_VOLATILE lwrb_t* buff, const void* data, size_t btw) {
 127:Src/lwrb.c    ****     size_t tocopy, free;
 128:Src/lwrb.c    ****     const uint8_t* d = data;
 129:Src/lwrb.c    **** 
 130:Src/lwrb.c    ****     if (!BUF_IS_VALID(buff) || data == NULL || btw == 0) {
 131:Src/lwrb.c    ****         return 0;
 132:Src/lwrb.c    ****     }
 133:Src/lwrb.c    **** 
 134:Src/lwrb.c    ****     /* Calculate maximum number of bytes available to write */
 135:Src/lwrb.c    ****     free = lwrb_get_free(buff);
 136:Src/lwrb.c    ****     btw = BUF_MIN(free, btw);
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 9


 137:Src/lwrb.c    ****     if (btw == 0) {
 138:Src/lwrb.c    ****         return 0;
 139:Src/lwrb.c    ****     }
 140:Src/lwrb.c    **** 
 141:Src/lwrb.c    ****     /* Step 1: Write data to linear part of buffer */
 142:Src/lwrb.c    ****     tocopy = BUF_MIN(buff->size - buff->w, btw);
 143:Src/lwrb.c    ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 144:Src/lwrb.c    ****     buff->w += tocopy;
 145:Src/lwrb.c    ****     btw -= tocopy;
 146:Src/lwrb.c    **** 
 147:Src/lwrb.c    ****     /* Step 2: Write data to beginning of buffer (overflow part) */
 148:Src/lwrb.c    ****     if (btw > 0) {
 149:Src/lwrb.c    ****         BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 150:Src/lwrb.c    ****         buff->w = btw;
 151:Src/lwrb.c    ****     }
 152:Src/lwrb.c    **** 
 153:Src/lwrb.c    ****     /* Step 3: Check end of buffer */
 154:Src/lwrb.c    ****     if (buff->w >= buff->size) {
 155:Src/lwrb.c    ****         buff->w = 0;
 156:Src/lwrb.c    ****     }
 157:Src/lwrb.c    ****     BUF_SEND_EVT(buff, LWRB_EVT_WRITE, tocopy + btw);
 158:Src/lwrb.c    ****     return tocopy + btw;
 159:Src/lwrb.c    **** }
 160:Src/lwrb.c    **** 
 161:Src/lwrb.c    **** /**
 162:Src/lwrb.c    ****  * \brief           Read data from buffer.
 163:Src/lwrb.c    ****  * Copies data from buffer to `data` array and marks buffer as free for maximum `btr` number of byt
 164:Src/lwrb.c    ****  *
 165:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 166:Src/lwrb.c    ****  * \param[out]      data: Pointer to output memory to copy buffer data to
 167:Src/lwrb.c    ****  * \param[in]       btr: Number of bytes to read
 168:Src/lwrb.c    ****  * \return          Number of bytes read and copied to data array
 169:Src/lwrb.c    ****  */
 170:Src/lwrb.c    **** size_t
 171:Src/lwrb.c    **** lwrb_read(LWRB_VOLATILE lwrb_t* buff, void* data, size_t btr) {
 172:Src/lwrb.c    ****     size_t tocopy, full;
 173:Src/lwrb.c    ****     uint8_t* d = data;
 174:Src/lwrb.c    **** 
 175:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff) || data == NULL || btr == 0) {
 176:Src/lwrb.c    ****     //     return 0;
 177:Src/lwrb.c    ****     // }
 178:Src/lwrb.c    **** 
 179:Src/lwrb.c    ****     /* Calculate maximum number of bytes available to read */
 180:Src/lwrb.c    ****     full = lwrb_get_full(buff);
 181:Src/lwrb.c    ****     btr = BUF_MIN(full, btr);
 182:Src/lwrb.c    ****     if (btr == 0) {
 183:Src/lwrb.c    ****         return 0;
 184:Src/lwrb.c    ****     }
 185:Src/lwrb.c    **** 
 186:Src/lwrb.c    ****     /* Step 1: Read data from linear part of buffer */
 187:Src/lwrb.c    ****     tocopy = BUF_MIN(buff->size - buff->r, btr);
 188:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 189:Src/lwrb.c    ****     buff->r += tocopy;
 190:Src/lwrb.c    ****     btr -= tocopy;
 191:Src/lwrb.c    **** 
 192:Src/lwrb.c    ****     /* Step 2: Read data from beginning of buffer (overflow part) */
 193:Src/lwrb.c    ****     if (btr > 0) {
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 10


 194:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 195:Src/lwrb.c    ****         buff->r = btr;
 196:Src/lwrb.c    ****     }
 197:Src/lwrb.c    **** 
 198:Src/lwrb.c    ****     /* Step 3: Check end of buffer */
 199:Src/lwrb.c    ****     if (buff->r >= buff->size) {
 200:Src/lwrb.c    ****         buff->r = 0;
 201:Src/lwrb.c    ****     }
 202:Src/lwrb.c    ****     BUF_SEND_EVT(buff, LWRB_EVT_READ, tocopy + btr);
 203:Src/lwrb.c    ****     return tocopy + btr;
 204:Src/lwrb.c    **** }
 205:Src/lwrb.c    **** 
 206:Src/lwrb.c    **** /**
 207:Src/lwrb.c    ****  * \brief           Read from buffer without changing read pointer (peek only)
 208:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 209:Src/lwrb.c    ****  * \param[in]       skip_count: Number of bytes to skip before reading data
 210:Src/lwrb.c    ****  * \param[out]      data: Pointer to output memory to copy buffer data to
 211:Src/lwrb.c    ****  * \param[in]       btp: Number of bytes to peek
 212:Src/lwrb.c    ****  * \return          Number of bytes peeked and written to output array
 213:Src/lwrb.c    ****  */
 214:Src/lwrb.c    **** size_t
 215:Src/lwrb.c    **** lwrb_peek(LWRB_VOLATILE lwrb_t* buff, size_t skip_count, void* data, size_t btp) {
 216:Src/lwrb.c    ****     size_t full, tocopy, r;
 217:Src/lwrb.c    ****     uint8_t* d = data;
 218:Src/lwrb.c    **** 
 219:Src/lwrb.c    ****     if (!BUF_IS_VALID(buff) || data == NULL || btp == 0) {
 220:Src/lwrb.c    ****         return 0;
 221:Src/lwrb.c    ****     }
 222:Src/lwrb.c    **** 
 223:Src/lwrb.c    ****     r = buff->r;
 224:Src/lwrb.c    **** 
 225:Src/lwrb.c    ****     /* Calculate maximum number of bytes available to read */
 226:Src/lwrb.c    ****     full = lwrb_get_full(buff);
 227:Src/lwrb.c    **** 
 228:Src/lwrb.c    ****     /* Skip beginning of buffer */
 229:Src/lwrb.c    ****     if (skip_count >= full) {
 230:Src/lwrb.c    ****         return 0;
 231:Src/lwrb.c    ****     }
 232:Src/lwrb.c    ****     r += skip_count;
 233:Src/lwrb.c    ****     full -= skip_count;
 234:Src/lwrb.c    ****     if (r >= buff->size) {
 235:Src/lwrb.c    ****         r -= buff->size;
 236:Src/lwrb.c    ****     }
 237:Src/lwrb.c    **** 
 238:Src/lwrb.c    ****     /* Check maximum number of bytes available to read after skip */
 239:Src/lwrb.c    ****     btp = BUF_MIN(full, btp);
 240:Src/lwrb.c    ****     if (btp == 0) {
 241:Src/lwrb.c    ****         return 0;
 242:Src/lwrb.c    ****     }
 243:Src/lwrb.c    **** 
 244:Src/lwrb.c    ****     /* Step 1: Read data from linear part of buffer */
 245:Src/lwrb.c    ****     tocopy = BUF_MIN(buff->size - r, btp);
 246:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[r], tocopy);
 247:Src/lwrb.c    ****     btp -= tocopy;
 248:Src/lwrb.c    **** 
 249:Src/lwrb.c    ****     /* Step 2: Read data from beginning of buffer (overflow part) */
 250:Src/lwrb.c    ****     if (btp > 0) {
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 11


 251:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 252:Src/lwrb.c    ****     }
 253:Src/lwrb.c    ****     return tocopy + btp;
 254:Src/lwrb.c    **** }
 255:Src/lwrb.c    **** 
 256:Src/lwrb.c    **** /**
 257:Src/lwrb.c    ****  * \brief           Get available size in buffer for write operation
 258:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 259:Src/lwrb.c    ****  * \return          Number of free bytes in memory
 260:Src/lwrb.c    ****  */
 261:Src/lwrb.c    **** size_t
 262:Src/lwrb.c    **** lwrb_get_free(LWRB_VOLATILE lwrb_t* buff) {
 303              		.loc 1 262 43 is_stmt 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 0
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 307              		@ link register save eliminated.
 263:Src/lwrb.c    ****     size_t size, w, r;
 308              		.loc 1 263 5 view .LVU67
 264:Src/lwrb.c    **** 
 265:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff)) {
 266:Src/lwrb.c    ****     //     return 0;
 267:Src/lwrb.c    ****     // }
 268:Src/lwrb.c    **** 
 269:Src/lwrb.c    ****     /* Use temporary values in case they are changed during operations */
 270:Src/lwrb.c    ****     w = buff->w;
 309              		.loc 1 270 5 view .LVU68
 310              		.loc 1 270 7 is_stmt 0 view .LVU69
 311 0000 0269     		ldr	r2, [r0, #16]
 312              	.LVL25:
 271:Src/lwrb.c    ****     r = buff->r;
 313              		.loc 1 271 5 is_stmt 1 view .LVU70
 314              		.loc 1 271 7 is_stmt 0 view .LVU71
 315 0002 C368     		ldr	r3, [r0, #12]
 316              	.LVL26:
 272:Src/lwrb.c    ****     if (w == r) {
 317              		.loc 1 272 5 is_stmt 1 view .LVU72
 318              		.loc 1 272 8 is_stmt 0 view .LVU73
 319 0004 9A42     		cmp	r2, r3
 320 0006 03D0     		beq	.L34
 273:Src/lwrb.c    ****         size = buff->size;
 274:Src/lwrb.c    ****     } else if (r > w) {
 321              		.loc 1 274 12 is_stmt 1 view .LVU74
 322              		.loc 1 274 15 is_stmt 0 view .LVU75
 323 0008 9A42     		cmp	r2, r3
 324 000a 04D2     		bcs	.L33
 275:Src/lwrb.c    ****         size = r - w;
 325              		.loc 1 275 9 is_stmt 1 view .LVU76
 326              		.loc 1 275 14 is_stmt 0 view .LVU77
 327 000c 981A     		subs	r0, r3, r2
 328              	.LVL27:
 329              		.loc 1 275 14 view .LVU78
 330 000e 00E0     		b	.L32
 331              	.LVL28:
 332              	.L34:
 273:Src/lwrb.c    ****         size = buff->size;
 333              		.loc 1 273 9 is_stmt 1 view .LVU79
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 12


 273:Src/lwrb.c    ****         size = buff->size;
 334              		.loc 1 273 14 is_stmt 0 view .LVU80
 335 0010 8068     		ldr	r0, [r0, #8]
 336              	.LVL29:
 337              	.L32:
 276:Src/lwrb.c    ****     } else {
 277:Src/lwrb.c    ****         size = buff->size - (w - r);
 278:Src/lwrb.c    ****     }
 279:Src/lwrb.c    **** 
 280:Src/lwrb.c    ****     /* Buffer free size is always 1 less than actual size */
 281:Src/lwrb.c    ****     return size - 1;
 338              		.loc 1 281 5 is_stmt 1 view .LVU81
 282:Src/lwrb.c    **** }
 339              		.loc 1 282 1 is_stmt 0 view .LVU82
 340 0012 0138     		subs	r0, r0, #1
 341              	.LVL30:
 342              		.loc 1 282 1 view .LVU83
 343 0014 7047     		bx	lr
 344              	.LVL31:
 345              	.L33:
 277:Src/lwrb.c    ****     }
 346              		.loc 1 277 9 is_stmt 1 view .LVU84
 277:Src/lwrb.c    ****     }
 347              		.loc 1 277 20 is_stmt 0 view .LVU85
 348 0016 8068     		ldr	r0, [r0, #8]
 349              	.LVL32:
 277:Src/lwrb.c    ****     }
 350              		.loc 1 277 27 view .LVU86
 351 0018 9B1A     		subs	r3, r3, r2
 352              	.LVL33:
 277:Src/lwrb.c    ****     }
 353              		.loc 1 277 14 view .LVU87
 354 001a 1844     		add	r0, r0, r3
 355              	.LVL34:
 277:Src/lwrb.c    ****     }
 356              		.loc 1 277 14 view .LVU88
 357 001c F9E7     		b	.L32
 358              		.cfi_endproc
 359              	.LFE7:
 361              		.section	.text.lwrb_write,"ax",%progbits
 362              		.align	1
 363              		.global	lwrb_write
 364              		.syntax unified
 365              		.thumb
 366              		.thumb_func
 367              		.fpu softvfp
 369              	lwrb_write:
 370              	.LVL35:
 371              	.LFB4:
 126:Src/lwrb.c    ****     size_t tocopy, free;
 372              		.loc 1 126 70 is_stmt 1 view -0
 373              		.cfi_startproc
 374              		@ args = 0, pretend = 0, frame = 0
 375              		@ frame_needed = 0, uses_anonymous_args = 0
 126:Src/lwrb.c    ****     size_t tocopy, free;
 376              		.loc 1 126 70 is_stmt 0 view .LVU90
 377 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 13


 378              	.LCFI0:
 379              		.cfi_def_cfa_offset 24
 380              		.cfi_offset 4, -24
 381              		.cfi_offset 5, -20
 382              		.cfi_offset 6, -16
 383              		.cfi_offset 7, -12
 384              		.cfi_offset 8, -8
 385              		.cfi_offset 14, -4
 127:Src/lwrb.c    ****     const uint8_t* d = data;
 386              		.loc 1 127 5 is_stmt 1 view .LVU91
 128:Src/lwrb.c    **** 
 387              		.loc 1 128 5 view .LVU92
 388              	.LVL36:
 130:Src/lwrb.c    ****         return 0;
 389              		.loc 1 130 5 view .LVU93
 130:Src/lwrb.c    ****         return 0;
 390              		.loc 1 130 8 is_stmt 0 view .LVU94
 391 0004 0028     		cmp	r0, #0
 392 0006 44D0     		beq	.L39
 393 0008 0F46     		mov	r7, r1
 394 000a 1546     		mov	r5, r2
 395 000c 0646     		mov	r6, r0
 130:Src/lwrb.c    ****         return 0;
 396              		.loc 1 130 10 discriminator 1 view .LVU95
 397 000e 0268     		ldr	r2, [r0]
 398              	.LVL37:
 130:Src/lwrb.c    ****         return 0;
 399              		.loc 1 130 10 discriminator 1 view .LVU96
 400 0010 284B     		ldr	r3, .L50
 401 0012 9A42     		cmp	r2, r3
 402 0014 3FD1     		bne	.L40
 130:Src/lwrb.c    ****         return 0;
 403              		.loc 1 130 10 discriminator 2 view .LVU97
 404 0016 8269     		ldr	r2, [r0, #24]
 405 0018 274B     		ldr	r3, .L50+4
 406 001a 9A42     		cmp	r2, r3
 407 001c 3FD1     		bne	.L41
 130:Src/lwrb.c    ****         return 0;
 408              		.loc 1 130 10 discriminator 3 view .LVU98
 409 001e D0F80480 		ldr	r8, [r0, #4]
 410 0022 B8F1000F 		cmp	r8, #0
 411 0026 3CD0     		beq	.L42
 130:Src/lwrb.c    ****         return 0;
 412              		.loc 1 130 10 discriminator 4 view .LVU99
 413 0028 8468     		ldr	r4, [r0, #8]
 130:Src/lwrb.c    ****         return 0;
 414              		.loc 1 130 9 discriminator 4 view .LVU100
 415 002a 002C     		cmp	r4, #0
 416 002c 34D0     		beq	.L35
 130:Src/lwrb.c    ****         return 0;
 417              		.loc 1 130 29 discriminator 5 view .LVU101
 418 002e 0029     		cmp	r1, #0
 419 0030 39D0     		beq	.L43
 130:Src/lwrb.c    ****         return 0;
 420              		.loc 1 130 45 discriminator 6 view .LVU102
 421 0032 002D     		cmp	r5, #0
 422 0034 39D0     		beq	.L44
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 14


 135:Src/lwrb.c    ****     btw = BUF_MIN(free, btw);
 423              		.loc 1 135 5 is_stmt 1 view .LVU103
 135:Src/lwrb.c    ****     btw = BUF_MIN(free, btw);
 424              		.loc 1 135 12 is_stmt 0 view .LVU104
 425 0036 FFF7FEFF 		bl	lwrb_get_free
 426              	.LVL38:
 136:Src/lwrb.c    ****     if (btw == 0) {
 427              		.loc 1 136 5 is_stmt 1 view .LVU105
 136:Src/lwrb.c    ****     if (btw == 0) {
 428              		.loc 1 136 9 is_stmt 0 view .LVU106
 429 003a 8542     		cmp	r5, r0
 430 003c 28BF     		it	cs
 431 003e 0546     		movcs	r5, r0
 432              	.LVL39:
 137:Src/lwrb.c    ****         return 0;
 433              		.loc 1 137 5 is_stmt 1 view .LVU107
 137:Src/lwrb.c    ****         return 0;
 434              		.loc 1 137 8 is_stmt 0 view .LVU108
 435 0040 0DB9     		cbnz	r5, .L48
 138:Src/lwrb.c    ****     }
 436              		.loc 1 138 16 view .LVU109
 437 0042 2C46     		mov	r4, r5
 438 0044 28E0     		b	.L35
 439              	.L48:
 142:Src/lwrb.c    ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 440              		.loc 1 142 5 is_stmt 1 view .LVU110
 142:Src/lwrb.c    ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 441              		.loc 1 142 14 is_stmt 0 view .LVU111
 442 0046 3069     		ldr	r0, [r6, #16]
 443              	.LVL40:
 142:Src/lwrb.c    ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 444              		.loc 1 142 14 view .LVU112
 445 0048 241A     		subs	r4, r4, r0
 142:Src/lwrb.c    ****     BUF_MEMCPY(&buff->buff[buff->w], d, tocopy);
 446              		.loc 1 142 12 view .LVU113
 447 004a AC42     		cmp	r4, r5
 448 004c 28BF     		it	cs
 449 004e 2C46     		movcs	r4, r5
 450              	.LVL41:
 143:Src/lwrb.c    ****     buff->w += tocopy;
 451              		.loc 1 143 5 is_stmt 1 view .LVU114
 452 0050 2246     		mov	r2, r4
 453 0052 3946     		mov	r1, r7
 454 0054 4044     		add	r0, r0, r8
 455 0056 FFF7FEFF 		bl	memcpy
 456              	.LVL42:
 144:Src/lwrb.c    ****     btw -= tocopy;
 457              		.loc 1 144 5 view .LVU115
 144:Src/lwrb.c    ****     btw -= tocopy;
 458              		.loc 1 144 13 is_stmt 0 view .LVU116
 459 005a 3369     		ldr	r3, [r6, #16]
 460 005c 2344     		add	r3, r3, r4
 461 005e 3361     		str	r3, [r6, #16]
 145:Src/lwrb.c    **** 
 462              		.loc 1 145 5 is_stmt 1 view .LVU117
 463              	.LVL43:
 148:Src/lwrb.c    ****         BUF_MEMCPY(buff->buff, &d[tocopy], btw);
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 15


 464              		.loc 1 148 5 view .LVU118
 148:Src/lwrb.c    ****         BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 465              		.loc 1 148 8 is_stmt 0 view .LVU119
 466 0060 B5EB0408 		subs	r8, r5, r4
 467              	.LVL44:
 148:Src/lwrb.c    ****         BUF_MEMCPY(buff->buff, &d[tocopy], btw);
 468              		.loc 1 148 8 view .LVU120
 469 0064 0DD1     		bne	.L49
 470              	.L37:
 154:Src/lwrb.c    ****         buff->w = 0;
 471              		.loc 1 154 5 is_stmt 1 view .LVU121
 154:Src/lwrb.c    ****         buff->w = 0;
 472              		.loc 1 154 13 is_stmt 0 view .LVU122
 473 0066 3269     		ldr	r2, [r6, #16]
 154:Src/lwrb.c    ****         buff->w = 0;
 474              		.loc 1 154 24 view .LVU123
 475 0068 B368     		ldr	r3, [r6, #8]
 154:Src/lwrb.c    ****         buff->w = 0;
 476              		.loc 1 154 8 view .LVU124
 477 006a 9A42     		cmp	r2, r3
 478 006c 01D3     		bcc	.L38
 155:Src/lwrb.c    ****     }
 479              		.loc 1 155 9 is_stmt 1 view .LVU125
 155:Src/lwrb.c    ****     }
 480              		.loc 1 155 17 is_stmt 0 view .LVU126
 481 006e 0023     		movs	r3, #0
 482 0070 3361     		str	r3, [r6, #16]
 483              	.L38:
 157:Src/lwrb.c    ****     return tocopy + btw;
 484              		.loc 1 157 5 is_stmt 1 view .LVU127
 157:Src/lwrb.c    ****     return tocopy + btw;
 485              		.loc 1 157 5 view .LVU128
 486 0072 7369     		ldr	r3, [r6, #20]
 487 0074 DBB1     		cbz	r3, .L46
 157:Src/lwrb.c    ****     return tocopy + btw;
 488              		.loc 1 157 5 discriminator 1 view .LVU129
 489 0076 2A46     		mov	r2, r5
 490 0078 0121     		movs	r1, #1
 491 007a 3046     		mov	r0, r6
 492 007c 9847     		blx	r3
 493              	.LVL45:
 158:Src/lwrb.c    **** }
 494              		.loc 1 158 19 is_stmt 0 discriminator 1 view .LVU130
 495 007e 2C46     		mov	r4, r5
 496              	.LVL46:
 158:Src/lwrb.c    **** }
 497              		.loc 1 158 19 discriminator 1 view .LVU131
 498 0080 0AE0     		b	.L35
 499              	.LVL47:
 500              	.L49:
 149:Src/lwrb.c    ****         buff->w = btw;
 501              		.loc 1 149 9 is_stmt 1 view .LVU132
 502 0082 4246     		mov	r2, r8
 503 0084 3919     		adds	r1, r7, r4
 504 0086 7068     		ldr	r0, [r6, #4]
 505 0088 FFF7FEFF 		bl	memcpy
 506              	.LVL48:
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 16


 150:Src/lwrb.c    ****     }
 507              		.loc 1 150 9 view .LVU133
 150:Src/lwrb.c    ****     }
 508              		.loc 1 150 17 is_stmt 0 view .LVU134
 509 008c C6F81080 		str	r8, [r6, #16]
 510 0090 E9E7     		b	.L37
 511              	.LVL49:
 512              	.L39:
 131:Src/lwrb.c    ****     }
 513              		.loc 1 131 16 view .LVU135
 514 0092 0024     		movs	r4, #0
 515 0094 00E0     		b	.L35
 516              	.LVL50:
 517              	.L40:
 131:Src/lwrb.c    ****     }
 518              		.loc 1 131 16 view .LVU136
 519 0096 0024     		movs	r4, #0
 520              	.LVL51:
 521              	.L35:
 159:Src/lwrb.c    **** 
 522              		.loc 1 159 1 view .LVU137
 523 0098 2046     		mov	r0, r4
 524 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 525              	.LVL52:
 526              	.L41:
 131:Src/lwrb.c    ****     }
 527              		.loc 1 131 16 view .LVU138
 528 009e 0024     		movs	r4, #0
 529 00a0 FAE7     		b	.L35
 530              	.L42:
 531 00a2 0024     		movs	r4, #0
 532 00a4 F8E7     		b	.L35
 533              	.L43:
 534 00a6 0024     		movs	r4, #0
 535 00a8 F6E7     		b	.L35
 536              	.L44:
 537 00aa 2C46     		mov	r4, r5
 538 00ac F4E7     		b	.L35
 539              	.LVL53:
 540              	.L46:
 158:Src/lwrb.c    **** }
 541              		.loc 1 158 19 view .LVU139
 542 00ae 2C46     		mov	r4, r5
 543              	.LVL54:
 158:Src/lwrb.c    **** }
 544              		.loc 1 158 19 view .LVU140
 545 00b0 F2E7     		b	.L35
 546              	.L51:
 547 00b2 00BF     		.align	2
 548              	.L50:
 549 00b4 EFBEADDE 		.word	-559038737
 550 00b8 10415221 		.word	559038736
 551              		.cfi_endproc
 552              	.LFE4:
 554              		.section	.text.lwrb_get_full,"ax",%progbits
 555              		.align	1
 556              		.global	lwrb_get_full
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 17


 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu softvfp
 562              	lwrb_get_full:
 563              	.LVL55:
 564              	.LFB8:
 283:Src/lwrb.c    **** 
 284:Src/lwrb.c    **** /**
 285:Src/lwrb.c    ****  * \brief           Get number of bytes currently available in buffer
 286:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 287:Src/lwrb.c    ****  * \return          Number of bytes ready to be read
 288:Src/lwrb.c    ****  */
 289:Src/lwrb.c    **** size_t
 290:Src/lwrb.c    **** lwrb_get_full(LWRB_VOLATILE lwrb_t* buff) {
 565              		.loc 1 290 43 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 0
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 569              		@ link register save eliminated.
 291:Src/lwrb.c    ****     size_t w, r, size;
 570              		.loc 1 291 5 view .LVU142
 292:Src/lwrb.c    **** 
 293:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff)) {
 294:Src/lwrb.c    ****     //     return 0;
 295:Src/lwrb.c    ****     // }
 296:Src/lwrb.c    **** 
 297:Src/lwrb.c    ****     /* Use temporary values in case they are changed during operations */
 298:Src/lwrb.c    ****     w = buff->w;
 571              		.loc 1 298 5 view .LVU143
 572              		.loc 1 298 7 is_stmt 0 view .LVU144
 573 0000 0369     		ldr	r3, [r0, #16]
 574              	.LVL56:
 299:Src/lwrb.c    ****     r = buff->r;
 575              		.loc 1 299 5 is_stmt 1 view .LVU145
 576              		.loc 1 299 7 is_stmt 0 view .LVU146
 577 0002 C268     		ldr	r2, [r0, #12]
 578              	.LVL57:
 300:Src/lwrb.c    ****     if (w == r) {
 579              		.loc 1 300 5 is_stmt 1 view .LVU147
 580              		.loc 1 300 8 is_stmt 0 view .LVU148
 581 0004 9342     		cmp	r3, r2
 582 0006 06D0     		beq	.L55
 301:Src/lwrb.c    ****         size = 0;
 302:Src/lwrb.c    ****     } else if (w > r) {
 583              		.loc 1 302 12 is_stmt 1 view .LVU149
 584              		.loc 1 302 15 is_stmt 0 view .LVU150
 585 0008 01D9     		bls	.L54
 303:Src/lwrb.c    ****         size = w - r;
 586              		.loc 1 303 9 is_stmt 1 view .LVU151
 587              		.loc 1 303 14 is_stmt 0 view .LVU152
 588 000a 981A     		subs	r0, r3, r2
 589              	.LVL58:
 590              		.loc 1 303 14 view .LVU153
 591 000c 7047     		bx	lr
 592              	.LVL59:
 593              	.L54:
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 18


 304:Src/lwrb.c    ****     } else {
 305:Src/lwrb.c    ****         size = buff->size - (r - w);
 594              		.loc 1 305 9 is_stmt 1 view .LVU154
 595              		.loc 1 305 20 is_stmt 0 view .LVU155
 596 000e 8068     		ldr	r0, [r0, #8]
 597              	.LVL60:
 598              		.loc 1 305 27 view .LVU156
 599 0010 9B1A     		subs	r3, r3, r2
 600              	.LVL61:
 601              		.loc 1 305 14 view .LVU157
 602 0012 1844     		add	r0, r0, r3
 603              	.LVL62:
 604              		.loc 1 305 14 view .LVU158
 605 0014 7047     		bx	lr
 606              	.LVL63:
 607              	.L55:
 301:Src/lwrb.c    ****     } else if (w > r) {
 608              		.loc 1 301 14 view .LVU159
 609 0016 0020     		movs	r0, #0
 610              	.LVL64:
 306:Src/lwrb.c    ****     }
 307:Src/lwrb.c    ****     return size;
 611              		.loc 1 307 5 is_stmt 1 view .LVU160
 308:Src/lwrb.c    **** }
 612              		.loc 1 308 1 is_stmt 0 view .LVU161
 613 0018 7047     		bx	lr
 614              		.cfi_endproc
 615              	.LFE8:
 617              		.section	.text.lwrb_read,"ax",%progbits
 618              		.align	1
 619              		.global	lwrb_read
 620              		.syntax unified
 621              		.thumb
 622              		.thumb_func
 623              		.fpu softvfp
 625              	lwrb_read:
 626              	.LVL65:
 627              	.LFB5:
 171:Src/lwrb.c    ****     size_t tocopy, full;
 628              		.loc 1 171 63 is_stmt 1 view -0
 629              		.cfi_startproc
 630              		@ args = 0, pretend = 0, frame = 0
 631              		@ frame_needed = 0, uses_anonymous_args = 0
 171:Src/lwrb.c    ****     size_t tocopy, full;
 632              		.loc 1 171 63 is_stmt 0 view .LVU163
 633 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 634              	.LCFI1:
 635              		.cfi_def_cfa_offset 24
 636              		.cfi_offset 4, -24
 637              		.cfi_offset 5, -20
 638              		.cfi_offset 6, -16
 639              		.cfi_offset 7, -12
 640              		.cfi_offset 8, -8
 641              		.cfi_offset 14, -4
 642 0004 0446     		mov	r4, r0
 643 0006 0F46     		mov	r7, r1
 644 0008 1546     		mov	r5, r2
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 19


 172:Src/lwrb.c    ****     uint8_t* d = data;
 645              		.loc 1 172 5 is_stmt 1 view .LVU164
 173:Src/lwrb.c    **** 
 646              		.loc 1 173 5 view .LVU165
 647              	.LVL66:
 180:Src/lwrb.c    ****     btr = BUF_MIN(full, btr);
 648              		.loc 1 180 5 view .LVU166
 180:Src/lwrb.c    ****     btr = BUF_MIN(full, btr);
 649              		.loc 1 180 12 is_stmt 0 view .LVU167
 650 000a FFF7FEFF 		bl	lwrb_get_full
 651              	.LVL67:
 181:Src/lwrb.c    ****     if (btr == 0) {
 652              		.loc 1 181 5 is_stmt 1 view .LVU168
 181:Src/lwrb.c    ****     if (btr == 0) {
 653              		.loc 1 181 9 is_stmt 0 view .LVU169
 654 000e 8542     		cmp	r5, r0
 655 0010 28BF     		it	cs
 656 0012 0546     		movcs	r5, r0
 657              	.LVL68:
 182:Src/lwrb.c    ****         return 0;
 658              		.loc 1 182 5 is_stmt 1 view .LVU170
 182:Src/lwrb.c    ****         return 0;
 659              		.loc 1 182 8 is_stmt 0 view .LVU171
 660 0014 15B9     		cbnz	r5, .L61
 661              	.LVL69:
 662              	.L56:
 204:Src/lwrb.c    **** 
 663              		.loc 1 204 1 view .LVU172
 664 0016 2846     		mov	r0, r5
 665 0018 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 666              	.LVL70:
 667              	.L61:
 187:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 668              		.loc 1 187 5 is_stmt 1 view .LVU173
 187:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 669              		.loc 1 187 14 is_stmt 0 view .LVU174
 670 001c A668     		ldr	r6, [r4, #8]
 671 001e E368     		ldr	r3, [r4, #12]
 672 0020 F61A     		subs	r6, r6, r3
 187:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[buff->r], tocopy);
 673              		.loc 1 187 12 view .LVU175
 674 0022 AE42     		cmp	r6, r5
 675 0024 28BF     		it	cs
 676 0026 2E46     		movcs	r6, r5
 677              	.LVL71:
 188:Src/lwrb.c    ****     buff->r += tocopy;
 678              		.loc 1 188 5 is_stmt 1 view .LVU176
 188:Src/lwrb.c    ****     buff->r += tocopy;
 679              		.loc 1 188 24 is_stmt 0 view .LVU177
 680 0028 6168     		ldr	r1, [r4, #4]
 188:Src/lwrb.c    ****     buff->r += tocopy;
 681              		.loc 1 188 5 view .LVU178
 682 002a 3246     		mov	r2, r6
 683 002c 1944     		add	r1, r1, r3
 684 002e 3846     		mov	r0, r7
 685              	.LVL72:
 188:Src/lwrb.c    ****     buff->r += tocopy;
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 20


 686              		.loc 1 188 5 view .LVU179
 687 0030 FFF7FEFF 		bl	memcpy
 688              	.LVL73:
 189:Src/lwrb.c    ****     btr -= tocopy;
 689              		.loc 1 189 5 is_stmt 1 view .LVU180
 189:Src/lwrb.c    ****     btr -= tocopy;
 690              		.loc 1 189 13 is_stmt 0 view .LVU181
 691 0034 E368     		ldr	r3, [r4, #12]
 692 0036 3344     		add	r3, r3, r6
 693 0038 E360     		str	r3, [r4, #12]
 190:Src/lwrb.c    **** 
 694              		.loc 1 190 5 is_stmt 1 view .LVU182
 695              	.LVL74:
 193:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 696              		.loc 1 193 5 view .LVU183
 193:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 697              		.loc 1 193 8 is_stmt 0 view .LVU184
 698 003a B5EB0608 		subs	r8, r5, r6
 699              	.LVL75:
 193:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btr);
 700              		.loc 1 193 8 view .LVU185
 701 003e 0DD1     		bne	.L62
 702              	.L58:
 199:Src/lwrb.c    ****         buff->r = 0;
 703              		.loc 1 199 5 is_stmt 1 view .LVU186
 199:Src/lwrb.c    ****         buff->r = 0;
 704              		.loc 1 199 13 is_stmt 0 view .LVU187
 705 0040 E268     		ldr	r2, [r4, #12]
 199:Src/lwrb.c    ****         buff->r = 0;
 706              		.loc 1 199 24 view .LVU188
 707 0042 A368     		ldr	r3, [r4, #8]
 199:Src/lwrb.c    ****         buff->r = 0;
 708              		.loc 1 199 8 view .LVU189
 709 0044 9A42     		cmp	r2, r3
 710 0046 01D3     		bcc	.L59
 200:Src/lwrb.c    ****     }
 711              		.loc 1 200 9 is_stmt 1 view .LVU190
 200:Src/lwrb.c    ****     }
 712              		.loc 1 200 17 is_stmt 0 view .LVU191
 713 0048 0023     		movs	r3, #0
 714 004a E360     		str	r3, [r4, #12]
 715              	.L59:
 202:Src/lwrb.c    ****     return tocopy + btr;
 716              		.loc 1 202 5 is_stmt 1 view .LVU192
 202:Src/lwrb.c    ****     return tocopy + btr;
 717              		.loc 1 202 5 view .LVU193
 718 004c 6369     		ldr	r3, [r4, #20]
 719 004e 002B     		cmp	r3, #0
 720 0050 E1D0     		beq	.L56
 202:Src/lwrb.c    ****     return tocopy + btr;
 721              		.loc 1 202 5 discriminator 1 view .LVU194
 722 0052 2A46     		mov	r2, r5
 723 0054 0021     		movs	r1, #0
 724 0056 2046     		mov	r0, r4
 725 0058 9847     		blx	r3
 726              	.LVL76:
 727 005a DCE7     		b	.L56
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 21


 728              	.L62:
 194:Src/lwrb.c    ****         buff->r = btr;
 729              		.loc 1 194 9 view .LVU195
 730 005c 4246     		mov	r2, r8
 731 005e 6168     		ldr	r1, [r4, #4]
 732 0060 B819     		adds	r0, r7, r6
 733 0062 FFF7FEFF 		bl	memcpy
 734              	.LVL77:
 195:Src/lwrb.c    ****     }
 735              		.loc 1 195 9 view .LVU196
 195:Src/lwrb.c    ****     }
 736              		.loc 1 195 17 is_stmt 0 view .LVU197
 737 0066 C4F80C80 		str	r8, [r4, #12]
 738 006a E9E7     		b	.L58
 739              		.cfi_endproc
 740              	.LFE5:
 742              		.section	.text.lwrb_peek,"ax",%progbits
 743              		.align	1
 744              		.global	lwrb_peek
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu softvfp
 750              	lwrb_peek:
 751              	.LVL78:
 752              	.LFB6:
 215:Src/lwrb.c    ****     size_t full, tocopy, r;
 753              		.loc 1 215 82 is_stmt 1 view -0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 0
 756              		@ frame_needed = 0, uses_anonymous_args = 0
 215:Src/lwrb.c    ****     size_t full, tocopy, r;
 757              		.loc 1 215 82 is_stmt 0 view .LVU199
 758 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 759              	.LCFI2:
 760              		.cfi_def_cfa_offset 32
 761              		.cfi_offset 4, -32
 762              		.cfi_offset 5, -28
 763              		.cfi_offset 6, -24
 764              		.cfi_offset 7, -20
 765              		.cfi_offset 8, -16
 766              		.cfi_offset 9, -12
 767              		.cfi_offset 10, -8
 768              		.cfi_offset 14, -4
 216:Src/lwrb.c    ****     uint8_t* d = data;
 769              		.loc 1 216 5 is_stmt 1 view .LVU200
 217:Src/lwrb.c    **** 
 770              		.loc 1 217 5 view .LVU201
 771              	.LVL79:
 219:Src/lwrb.c    ****         return 0;
 772              		.loc 1 219 5 view .LVU202
 219:Src/lwrb.c    ****         return 0;
 773              		.loc 1 219 8 is_stmt 0 view .LVU203
 774 0004 0028     		cmp	r0, #0
 775 0006 3CD0     		beq	.L66
 776 0008 8846     		mov	r8, r1
 777 000a 1746     		mov	r7, r2
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 22


 778 000c 1D46     		mov	r5, r3
 779 000e 0646     		mov	r6, r0
 219:Src/lwrb.c    ****         return 0;
 780              		.loc 1 219 10 discriminator 1 view .LVU204
 781 0010 0268     		ldr	r2, [r0]
 782              	.LVL80:
 219:Src/lwrb.c    ****         return 0;
 783              		.loc 1 219 10 discriminator 1 view .LVU205
 784 0012 244B     		ldr	r3, .L78
 785              	.LVL81:
 219:Src/lwrb.c    ****         return 0;
 786              		.loc 1 219 10 discriminator 1 view .LVU206
 787 0014 9A42     		cmp	r2, r3
 788 0016 36D1     		bne	.L67
 219:Src/lwrb.c    ****         return 0;
 789              		.loc 1 219 10 discriminator 2 view .LVU207
 790 0018 8269     		ldr	r2, [r0, #24]
 791 001a 234B     		ldr	r3, .L78+4
 792 001c 9A42     		cmp	r2, r3
 793 001e 36D1     		bne	.L68
 219:Src/lwrb.c    ****         return 0;
 794              		.loc 1 219 10 discriminator 3 view .LVU208
 795 0020 D0F80490 		ldr	r9, [r0, #4]
 796 0024 B9F1000F 		cmp	r9, #0
 797 0028 33D0     		beq	.L69
 219:Src/lwrb.c    ****         return 0;
 798              		.loc 1 219 10 discriminator 4 view .LVU209
 799 002a 8468     		ldr	r4, [r0, #8]
 219:Src/lwrb.c    ****         return 0;
 800              		.loc 1 219 9 discriminator 4 view .LVU210
 801 002c 64B3     		cbz	r4, .L63
 219:Src/lwrb.c    ****         return 0;
 802              		.loc 1 219 29 discriminator 5 view .LVU211
 803 002e 97B3     		cbz	r7, .L70
 219:Src/lwrb.c    ****         return 0;
 804              		.loc 1 219 45 discriminator 6 view .LVU212
 805 0030 9DB3     		cbz	r5, .L71
 223:Src/lwrb.c    **** 
 806              		.loc 1 223 5 is_stmt 1 view .LVU213
 223:Src/lwrb.c    **** 
 807              		.loc 1 223 7 is_stmt 0 view .LVU214
 808 0032 D0F80CA0 		ldr	r10, [r0, #12]
 809              	.LVL82:
 226:Src/lwrb.c    **** 
 810              		.loc 1 226 5 is_stmt 1 view .LVU215
 226:Src/lwrb.c    **** 
 811              		.loc 1 226 12 is_stmt 0 view .LVU216
 812 0036 FFF7FEFF 		bl	lwrb_get_full
 813              	.LVL83:
 229:Src/lwrb.c    ****         return 0;
 814              		.loc 1 229 5 is_stmt 1 view .LVU217
 229:Src/lwrb.c    ****         return 0;
 815              		.loc 1 229 8 is_stmt 0 view .LVU218
 816 003a 4045     		cmp	r0, r8
 817 003c 2FD9     		bls	.L72
 232:Src/lwrb.c    ****     full -= skip_count;
 818              		.loc 1 232 5 is_stmt 1 view .LVU219
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 23


 232:Src/lwrb.c    ****     full -= skip_count;
 819              		.loc 1 232 7 is_stmt 0 view .LVU220
 820 003e C244     		add	r10, r10, r8
 821              	.LVL84:
 233:Src/lwrb.c    ****     if (r >= buff->size) {
 822              		.loc 1 233 5 is_stmt 1 view .LVU221
 233:Src/lwrb.c    ****     if (r >= buff->size) {
 823              		.loc 1 233 10 is_stmt 0 view .LVU222
 824 0040 A0EB0803 		sub	r3, r0, r8
 825              	.LVL85:
 234:Src/lwrb.c    ****         r -= buff->size;
 826              		.loc 1 234 5 is_stmt 1 view .LVU223
 234:Src/lwrb.c    ****         r -= buff->size;
 827              		.loc 1 234 8 is_stmt 0 view .LVU224
 828 0044 5445     		cmp	r4, r10
 829 0046 01D8     		bhi	.L65
 235:Src/lwrb.c    ****     }
 830              		.loc 1 235 9 is_stmt 1 view .LVU225
 235:Src/lwrb.c    ****     }
 831              		.loc 1 235 11 is_stmt 0 view .LVU226
 832 0048 AAEB040A 		sub	r10, r10, r4
 833              	.LVL86:
 834              	.L65:
 239:Src/lwrb.c    ****     if (btp == 0) {
 835              		.loc 1 239 5 is_stmt 1 view .LVU227
 239:Src/lwrb.c    ****     if (btp == 0) {
 836              		.loc 1 239 9 is_stmt 0 view .LVU228
 837 004c 9D42     		cmp	r5, r3
 838 004e 28BF     		it	cs
 839 0050 1D46     		movcs	r5, r3
 840              	.LVL87:
 240:Src/lwrb.c    ****         return 0;
 841              		.loc 1 240 5 is_stmt 1 view .LVU229
 240:Src/lwrb.c    ****         return 0;
 842              		.loc 1 240 8 is_stmt 0 view .LVU230
 843 0052 0DB9     		cbnz	r5, .L76
 241:Src/lwrb.c    ****     }
 844              		.loc 1 241 16 view .LVU231
 845 0054 2C46     		mov	r4, r5
 846 0056 17E0     		b	.L63
 847              	.L76:
 245:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[r], tocopy);
 848              		.loc 1 245 5 is_stmt 1 view .LVU232
 245:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[r], tocopy);
 849              		.loc 1 245 14 is_stmt 0 view .LVU233
 850 0058 A4EB0A04 		sub	r4, r4, r10
 245:Src/lwrb.c    ****     BUF_MEMCPY(d, &buff->buff[r], tocopy);
 851              		.loc 1 245 12 view .LVU234
 852 005c AC42     		cmp	r4, r5
 853 005e 28BF     		it	cs
 854 0060 2C46     		movcs	r4, r5
 855              	.LVL88:
 246:Src/lwrb.c    ****     btp -= tocopy;
 856              		.loc 1 246 5 is_stmt 1 view .LVU235
 857 0062 2246     		mov	r2, r4
 858 0064 09EB0A01 		add	r1, r9, r10
 859 0068 3846     		mov	r0, r7
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 24


 860 006a FFF7FEFF 		bl	memcpy
 861              	.LVL89:
 247:Src/lwrb.c    **** 
 862              		.loc 1 247 5 view .LVU236
 250:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 863              		.loc 1 250 5 view .LVU237
 250:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 864              		.loc 1 250 8 is_stmt 0 view .LVU238
 865 006e 2A1B     		subs	r2, r5, r4
 866              	.LVL90:
 250:Src/lwrb.c    ****         BUF_MEMCPY(&d[tocopy], buff->buff, btp);
 867              		.loc 1 250 8 view .LVU239
 868 0070 01D1     		bne	.L77
 253:Src/lwrb.c    **** }
 869              		.loc 1 253 19 view .LVU240
 870 0072 2C46     		mov	r4, r5
 871              	.LVL91:
 253:Src/lwrb.c    **** }
 872              		.loc 1 253 19 view .LVU241
 873 0074 08E0     		b	.L63
 874              	.LVL92:
 875              	.L77:
 251:Src/lwrb.c    ****     }
 876              		.loc 1 251 9 is_stmt 1 view .LVU242
 877 0076 7168     		ldr	r1, [r6, #4]
 878 0078 3819     		adds	r0, r7, r4
 879 007a FFF7FEFF 		bl	memcpy
 880              	.LVL93:
 253:Src/lwrb.c    **** }
 881              		.loc 1 253 19 is_stmt 0 view .LVU243
 882 007e 2C46     		mov	r4, r5
 883              	.LVL94:
 253:Src/lwrb.c    **** }
 884              		.loc 1 253 19 view .LVU244
 885 0080 02E0     		b	.L63
 886              	.LVL95:
 887              	.L66:
 220:Src/lwrb.c    ****     }
 888              		.loc 1 220 16 view .LVU245
 889 0082 0024     		movs	r4, #0
 890 0084 00E0     		b	.L63
 891              	.LVL96:
 892              	.L67:
 220:Src/lwrb.c    ****     }
 893              		.loc 1 220 16 view .LVU246
 894 0086 0024     		movs	r4, #0
 895              	.LVL97:
 896              	.L63:
 254:Src/lwrb.c    **** 
 897              		.loc 1 254 1 view .LVU247
 898 0088 2046     		mov	r0, r4
 899 008a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 900              	.LVL98:
 901              	.L68:
 220:Src/lwrb.c    ****     }
 902              		.loc 1 220 16 view .LVU248
 903 008e 0024     		movs	r4, #0
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 25


 904 0090 FAE7     		b	.L63
 905              	.L69:
 906 0092 0024     		movs	r4, #0
 907 0094 F8E7     		b	.L63
 908              	.L70:
 909 0096 0024     		movs	r4, #0
 910 0098 F6E7     		b	.L63
 911              	.L71:
 912 009a 2C46     		mov	r4, r5
 913 009c F4E7     		b	.L63
 914              	.LVL99:
 915              	.L72:
 230:Src/lwrb.c    ****     }
 916              		.loc 1 230 16 view .LVU249
 917 009e 0024     		movs	r4, #0
 918 00a0 F2E7     		b	.L63
 919              	.L79:
 920 00a2 00BF     		.align	2
 921              	.L78:
 922 00a4 EFBEADDE 		.word	-559038737
 923 00a8 10415221 		.word	559038736
 924              		.cfi_endproc
 925              	.LFE6:
 927              		.section	.text.lwrb_reset,"ax",%progbits
 928              		.align	1
 929              		.global	lwrb_reset
 930              		.syntax unified
 931              		.thumb
 932              		.thumb_func
 933              		.fpu softvfp
 935              	lwrb_reset:
 936              	.LVL100:
 937              	.LFB9:
 309:Src/lwrb.c    **** 
 310:Src/lwrb.c    **** /**
 311:Src/lwrb.c    ****  * \brief           Resets buffer to default values. Buffer size is not modified
 312:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 313:Src/lwrb.c    ****  */
 314:Src/lwrb.c    **** void
 315:Src/lwrb.c    **** lwrb_reset(LWRB_VOLATILE lwrb_t* buff) {
 938              		.loc 1 315 40 is_stmt 1 view -0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 0
 941              		@ frame_needed = 0, uses_anonymous_args = 0
 316:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 942              		.loc 1 316 5 view .LVU251
 943              		.loc 1 316 8 is_stmt 0 view .LVU252
 944 0000 18B1     		cbz	r0, .L83
 945              		.loc 1 316 9 discriminator 1 view .LVU253
 946 0002 0168     		ldr	r1, [r0]
 947 0004 0B4A     		ldr	r2, .L87
 948 0006 9142     		cmp	r1, r2
 949 0008 00D0     		beq	.L86
 950              	.L83:
 951 000a 7047     		bx	lr
 952              	.L86:
 953              		.loc 1 316 9 discriminator 2 view .LVU254
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 26


 954 000c 8169     		ldr	r1, [r0, #24]
 955 000e 0A4A     		ldr	r2, .L87+4
 956 0010 9142     		cmp	r1, r2
 957 0012 FAD1     		bne	.L83
 958              		.loc 1 316 9 discriminator 3 view .LVU255
 959 0014 4268     		ldr	r2, [r0, #4]
 960 0016 002A     		cmp	r2, #0
 961 0018 F7D0     		beq	.L83
 962              		.loc 1 316 9 discriminator 4 view .LVU256
 963 001a 8268     		ldr	r2, [r0, #8]
 964 001c 002A     		cmp	r2, #0
 965 001e F4D0     		beq	.L83
 315:Src/lwrb.c    ****     if (BUF_IS_VALID(buff)) {
 966              		.loc 1 315 40 view .LVU257
 967 0020 10B5     		push	{r4, lr}
 968              	.LCFI3:
 969              		.cfi_def_cfa_offset 8
 970              		.cfi_offset 4, -8
 971              		.cfi_offset 14, -4
 317:Src/lwrb.c    ****         buff->w = 0;
 972              		.loc 1 317 9 is_stmt 1 view .LVU258
 973              		.loc 1 317 17 is_stmt 0 view .LVU259
 974 0022 0022     		movs	r2, #0
 975 0024 0261     		str	r2, [r0, #16]
 318:Src/lwrb.c    ****         buff->r = 0;
 976              		.loc 1 318 9 is_stmt 1 view .LVU260
 977              		.loc 1 318 17 is_stmt 0 view .LVU261
 978 0026 C260     		str	r2, [r0, #12]
 319:Src/lwrb.c    ****         BUF_SEND_EVT(buff, LWRB_EVT_RESET, 0);
 979              		.loc 1 319 9 is_stmt 1 view .LVU262
 980              		.loc 1 319 9 view .LVU263
 981 0028 4469     		ldr	r4, [r0, #20]
 982 002a 0CB1     		cbz	r4, .L80
 983              		.loc 1 319 9 discriminator 1 view .LVU264
 984 002c 0221     		movs	r1, #2
 985 002e A047     		blx	r4
 986              	.LVL101:
 987              		.loc 1 319 9 discriminator 1 view .LVU265
 988              	.L80:
 320:Src/lwrb.c    ****     }
 321:Src/lwrb.c    **** }
 989              		.loc 1 321 1 is_stmt 0 view .LVU266
 990 0030 10BD     		pop	{r4, pc}
 991              	.L88:
 992 0032 00BF     		.align	2
 993              	.L87:
 994 0034 EFBEADDE 		.word	-559038737
 995 0038 10415221 		.word	559038736
 996              		.cfi_endproc
 997              	.LFE9:
 999              		.section	.text.lwrb_get_linear_block_read_address,"ax",%progbits
 1000              		.align	1
 1001              		.global	lwrb_get_linear_block_read_address
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1005              		.fpu softvfp
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 27


 1007              	lwrb_get_linear_block_read_address:
 1008              	.LVL102:
 1009              	.LFB10:
 322:Src/lwrb.c    **** 
 323:Src/lwrb.c    **** /**
 324:Src/lwrb.c    ****  * \brief           Get linear address for buffer for fast read
 325:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 326:Src/lwrb.c    ****  * \return          Linear buffer start address
 327:Src/lwrb.c    ****  */
 328:Src/lwrb.c    **** void*
 329:Src/lwrb.c    **** lwrb_get_linear_block_read_address(LWRB_VOLATILE lwrb_t* buff) {
 1010              		.loc 1 329 64 is_stmt 1 view -0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 0
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014              		@ link register save eliminated.
 330:Src/lwrb.c    ****     if (!BUF_IS_VALID(buff)) {
 1015              		.loc 1 330 5 view .LVU268
 1016              		.loc 1 330 8 is_stmt 0 view .LVU269
 1017 0000 0346     		mov	r3, r0
 1018 0002 70B1     		cbz	r0, .L91
 1019              		.loc 1 330 10 discriminator 1 view .LVU270
 1020 0004 0168     		ldr	r1, [r0]
 1021 0006 0A4A     		ldr	r2, .L95
 1022 0008 9142     		cmp	r1, r2
 1023 000a 0BD1     		bne	.L92
 1024              		.loc 1 330 10 discriminator 2 view .LVU271
 1025 000c 8169     		ldr	r1, [r0, #24]
 1026 000e 094A     		ldr	r2, .L95+4
 1027 0010 9142     		cmp	r1, r2
 1028 0012 09D1     		bne	.L93
 1029              		.loc 1 330 10 discriminator 3 view .LVU272
 1030 0014 4068     		ldr	r0, [r0, #4]
 1031              	.LVL103:
 1032              		.loc 1 330 10 discriminator 3 view .LVU273
 1033 0016 50B1     		cbz	r0, .L89
 1034              		.loc 1 330 10 discriminator 4 view .LVU274
 1035 0018 9A68     		ldr	r2, [r3, #8]
 1036              		.loc 1 330 9 discriminator 4 view .LVU275
 1037 001a 3AB1     		cbz	r2, .L94
 331:Src/lwrb.c    ****         return NULL;
 332:Src/lwrb.c    ****     }
 333:Src/lwrb.c    ****     return &buff->buff[buff->r];
 1038              		.loc 1 333 5 is_stmt 1 view .LVU276
 1039              		.loc 1 333 28 is_stmt 0 view .LVU277
 1040 001c DB68     		ldr	r3, [r3, #12]
 1041              	.LVL104:
 1042              		.loc 1 333 12 view .LVU278
 1043 001e 1844     		add	r0, r0, r3
 1044 0020 7047     		bx	lr
 1045              	.LVL105:
 1046              	.L91:
 1047              		.loc 1 333 12 view .LVU279
 1048 0022 7047     		bx	lr
 1049              	.L92:
 331:Src/lwrb.c    ****         return NULL;
 1050              		.loc 1 331 16 view .LVU280
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 28


 1051 0024 0020     		movs	r0, #0
 1052              	.LVL106:
 331:Src/lwrb.c    ****         return NULL;
 1053              		.loc 1 331 16 view .LVU281
 1054 0026 7047     		bx	lr
 1055              	.LVL107:
 1056              	.L93:
 331:Src/lwrb.c    ****         return NULL;
 1057              		.loc 1 331 16 view .LVU282
 1058 0028 0020     		movs	r0, #0
 1059              	.LVL108:
 331:Src/lwrb.c    ****         return NULL;
 1060              		.loc 1 331 16 view .LVU283
 1061 002a 7047     		bx	lr
 1062              	.L94:
 1063 002c 0020     		movs	r0, #0
 1064              	.L89:
 334:Src/lwrb.c    **** }
 1065              		.loc 1 334 1 view .LVU284
 1066 002e 7047     		bx	lr
 1067              	.L96:
 1068              		.align	2
 1069              	.L95:
 1070 0030 EFBEADDE 		.word	-559038737
 1071 0034 10415221 		.word	559038736
 1072              		.cfi_endproc
 1073              	.LFE10:
 1075              		.section	.text.lwrb_get_linear_block_read_length,"ax",%progbits
 1076              		.align	1
 1077              		.global	lwrb_get_linear_block_read_length
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu softvfp
 1083              	lwrb_get_linear_block_read_length:
 1084              	.LVL109:
 1085              	.LFB11:
 335:Src/lwrb.c    **** 
 336:Src/lwrb.c    **** /**
 337:Src/lwrb.c    ****  * \brief           Get length of linear block address before it overflows for read operation
 338:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 339:Src/lwrb.c    ****  * \return          Linear buffer size in units of bytes for read operation
 340:Src/lwrb.c    ****  */
 341:Src/lwrb.c    **** size_t
 342:Src/lwrb.c    **** lwrb_get_linear_block_read_length(LWRB_VOLATILE lwrb_t* buff) {
 1086              		.loc 1 342 63 is_stmt 1 view -0
 1087              		.cfi_startproc
 1088              		@ args = 0, pretend = 0, frame = 0
 1089              		@ frame_needed = 0, uses_anonymous_args = 0
 1090              		@ link register save eliminated.
 343:Src/lwrb.c    ****     size_t w, r, len;
 1091              		.loc 1 343 5 view .LVU286
 344:Src/lwrb.c    **** 
 345:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff)) {
 346:Src/lwrb.c    ****     //     return 0;
 347:Src/lwrb.c    ****     // }
 348:Src/lwrb.c    **** 
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 29


 349:Src/lwrb.c    ****     /* Use temporary values in case they are changed during operations */
 350:Src/lwrb.c    ****     w = buff->w;
 1092              		.loc 1 350 5 view .LVU287
 1093              		.loc 1 350 7 is_stmt 0 view .LVU288
 1094 0000 0269     		ldr	r2, [r0, #16]
 1095              	.LVL110:
 351:Src/lwrb.c    ****     r = buff->r;
 1096              		.loc 1 351 5 is_stmt 1 view .LVU289
 1097              		.loc 1 351 7 is_stmt 0 view .LVU290
 1098 0002 C368     		ldr	r3, [r0, #12]
 1099              	.LVL111:
 352:Src/lwrb.c    ****     if (w > r) {
 1100              		.loc 1 352 5 is_stmt 1 view .LVU291
 1101              		.loc 1 352 8 is_stmt 0 view .LVU292
 1102 0004 9A42     		cmp	r2, r3
 1103 0006 01D9     		bls	.L98
 353:Src/lwrb.c    ****         len = w - r;
 1104              		.loc 1 353 9 is_stmt 1 view .LVU293
 1105              		.loc 1 353 13 is_stmt 0 view .LVU294
 1106 0008 D01A     		subs	r0, r2, r3
 1107              	.LVL112:
 1108              		.loc 1 353 13 view .LVU295
 1109 000a 7047     		bx	lr
 1110              	.LVL113:
 1111              	.L98:
 354:Src/lwrb.c    ****     } else if (r > w) {
 1112              		.loc 1 354 12 is_stmt 1 view .LVU296
 1113              		.loc 1 354 15 is_stmt 0 view .LVU297
 1114 000c 9A42     		cmp	r2, r3
 1115 000e 02D2     		bcs	.L100
 355:Src/lwrb.c    ****         len = buff->size - r;
 1116              		.loc 1 355 9 is_stmt 1 view .LVU298
 1117              		.loc 1 355 19 is_stmt 0 view .LVU299
 1118 0010 8068     		ldr	r0, [r0, #8]
 1119              	.LVL114:
 1120              		.loc 1 355 13 view .LVU300
 1121 0012 C01A     		subs	r0, r0, r3
 1122              	.LVL115:
 1123              		.loc 1 355 13 view .LVU301
 1124 0014 7047     		bx	lr
 1125              	.LVL116:
 1126              	.L100:
 356:Src/lwrb.c    ****     } else {
 357:Src/lwrb.c    ****         len = 0;
 1127              		.loc 1 357 13 view .LVU302
 1128 0016 0020     		movs	r0, #0
 1129              	.LVL117:
 358:Src/lwrb.c    ****     }
 359:Src/lwrb.c    ****     return len;
 1130              		.loc 1 359 5 is_stmt 1 view .LVU303
 360:Src/lwrb.c    **** }
 1131              		.loc 1 360 1 is_stmt 0 view .LVU304
 1132 0018 7047     		bx	lr
 1133              		.cfi_endproc
 1134              	.LFE11:
 1136              		.section	.text.lwrb_skip,"ax",%progbits
 1137              		.align	1
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 30


 1138              		.global	lwrb_skip
 1139              		.syntax unified
 1140              		.thumb
 1141              		.thumb_func
 1142              		.fpu softvfp
 1144              	lwrb_skip:
 1145              	.LVL118:
 1146              	.LFB12:
 361:Src/lwrb.c    **** 
 362:Src/lwrb.c    **** /**
 363:Src/lwrb.c    ****  * \brief           Skip (ignore; advance read pointer) buffer data
 364:Src/lwrb.c    ****  * Marks data as read in the buffer and increases free memory for up to `len` bytes
 365:Src/lwrb.c    ****  *
 366:Src/lwrb.c    ****  * \note            Useful at the end of streaming transfer such as DMA
 367:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 368:Src/lwrb.c    ****  * \param[in]       len: Number of bytes to skip and mark as read
 369:Src/lwrb.c    ****  * \return          Number of bytes skipped
 370:Src/lwrb.c    ****  */
 371:Src/lwrb.c    **** size_t
 372:Src/lwrb.c    **** lwrb_skip(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 1147              		.loc 1 372 51 is_stmt 1 view -0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		.loc 1 372 51 is_stmt 0 view .LVU306
 1152 0000 38B5     		push	{r3, r4, r5, lr}
 1153              	.LCFI4:
 1154              		.cfi_def_cfa_offset 16
 1155              		.cfi_offset 3, -16
 1156              		.cfi_offset 4, -12
 1157              		.cfi_offset 5, -8
 1158              		.cfi_offset 14, -4
 1159 0002 0446     		mov	r4, r0
 1160 0004 0D46     		mov	r5, r1
 373:Src/lwrb.c    ****     size_t full;
 1161              		.loc 1 373 5 is_stmt 1 view .LVU307
 374:Src/lwrb.c    **** 
 375:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff) || len == 0) {
 376:Src/lwrb.c    ****     //     return 0;
 377:Src/lwrb.c    ****     // }
 378:Src/lwrb.c    **** 
 379:Src/lwrb.c    ****     full = lwrb_get_full(buff);
 1162              		.loc 1 379 5 view .LVU308
 1163              		.loc 1 379 12 is_stmt 0 view .LVU309
 1164 0006 FFF7FEFF 		bl	lwrb_get_full
 1165              	.LVL119:
 380:Src/lwrb.c    ****     len = BUF_MIN(len, full);
 1166              		.loc 1 380 5 is_stmt 1 view .LVU310
 1167              		.loc 1 380 9 is_stmt 0 view .LVU311
 1168 000a 8542     		cmp	r5, r0
 1169 000c 28BF     		it	cs
 1170 000e 0546     		movcs	r5, r0
 1171              	.LVL120:
 381:Src/lwrb.c    ****     buff->r += len;
 1172              		.loc 1 381 5 is_stmt 1 view .LVU312
 1173              		.loc 1 381 13 is_stmt 0 view .LVU313
 1174 0010 E368     		ldr	r3, [r4, #12]
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 31


 1175 0012 2B44     		add	r3, r3, r5
 1176 0014 E360     		str	r3, [r4, #12]
 382:Src/lwrb.c    ****     if (buff->r >= buff->size) {
 1177              		.loc 1 382 5 is_stmt 1 view .LVU314
 1178              		.loc 1 382 24 is_stmt 0 view .LVU315
 1179 0016 A268     		ldr	r2, [r4, #8]
 1180              		.loc 1 382 8 view .LVU316
 1181 0018 9342     		cmp	r3, r2
 1182 001a 01D3     		bcc	.L102
 383:Src/lwrb.c    ****         buff->r -= buff->size;
 1183              		.loc 1 383 9 is_stmt 1 view .LVU317
 1184              		.loc 1 383 17 is_stmt 0 view .LVU318
 1185 001c 9B1A     		subs	r3, r3, r2
 1186 001e E360     		str	r3, [r4, #12]
 1187              	.L102:
 384:Src/lwrb.c    ****     }
 385:Src/lwrb.c    ****     BUF_SEND_EVT(buff, LWRB_EVT_READ, len);
 1188              		.loc 1 385 5 is_stmt 1 view .LVU319
 1189              		.loc 1 385 5 view .LVU320
 1190 0020 6369     		ldr	r3, [r4, #20]
 1191 0022 1BB1     		cbz	r3, .L101
 1192              		.loc 1 385 5 discriminator 1 view .LVU321
 1193 0024 2A46     		mov	r2, r5
 1194 0026 0021     		movs	r1, #0
 1195 0028 2046     		mov	r0, r4
 1196              	.LVL121:
 1197              		.loc 1 385 5 is_stmt 0 discriminator 1 view .LVU322
 1198 002a 9847     		blx	r3
 1199              	.LVL122:
 1200              		.loc 1 385 5 is_stmt 1 discriminator 1 view .LVU323
 386:Src/lwrb.c    ****     return len;
 1201              		.loc 1 386 5 discriminator 1 view .LVU324
 1202              	.L101:
 387:Src/lwrb.c    **** }
 1203              		.loc 1 387 1 is_stmt 0 view .LVU325
 1204 002c 2846     		mov	r0, r5
 1205 002e 38BD     		pop	{r3, r4, r5, pc}
 1206              		.loc 1 387 1 view .LVU326
 1207              		.cfi_endproc
 1208              	.LFE12:
 1210              		.section	.text.lwrb_get_linear_block_write_address,"ax",%progbits
 1211              		.align	1
 1212              		.global	lwrb_get_linear_block_write_address
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu softvfp
 1218              	lwrb_get_linear_block_write_address:
 1219              	.LVL123:
 1220              	.LFB13:
 388:Src/lwrb.c    **** 
 389:Src/lwrb.c    **** /**
 390:Src/lwrb.c    ****  * \brief           Get linear address for buffer for fast read
 391:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 392:Src/lwrb.c    ****  * \return          Linear buffer start address
 393:Src/lwrb.c    ****  */
 394:Src/lwrb.c    **** void*
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 32


 395:Src/lwrb.c    **** lwrb_get_linear_block_write_address(LWRB_VOLATILE lwrb_t* buff) {
 1221              		.loc 1 395 65 is_stmt 1 view -0
 1222              		.cfi_startproc
 1223              		@ args = 0, pretend = 0, frame = 0
 1224              		@ frame_needed = 0, uses_anonymous_args = 0
 1225              		@ link register save eliminated.
 396:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff)) {
 397:Src/lwrb.c    ****     //     return NULL;
 398:Src/lwrb.c    ****     // }
 399:Src/lwrb.c    ****     return &buff->buff[buff->w];
 1226              		.loc 1 399 5 view .LVU328
 1227              		.loc 1 399 17 is_stmt 0 view .LVU329
 1228 0000 4268     		ldr	r2, [r0, #4]
 1229              		.loc 1 399 28 view .LVU330
 1230 0002 0069     		ldr	r0, [r0, #16]
 1231              	.LVL124:
 400:Src/lwrb.c    **** }
 1232              		.loc 1 400 1 view .LVU331
 1233 0004 1044     		add	r0, r0, r2
 1234 0006 7047     		bx	lr
 1235              		.cfi_endproc
 1236              	.LFE13:
 1238              		.section	.text.lwrb_get_linear_block_write_length,"ax",%progbits
 1239              		.align	1
 1240              		.global	lwrb_get_linear_block_write_length
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu softvfp
 1246              	lwrb_get_linear_block_write_length:
 1247              	.LVL125:
 1248              	.LFB14:
 401:Src/lwrb.c    **** 
 402:Src/lwrb.c    **** /**
 403:Src/lwrb.c    ****  * \brief           Get length of linear block address before it overflows for write operation
 404:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 405:Src/lwrb.c    ****  * \return          Linear buffer size in units of bytes for write operation
 406:Src/lwrb.c    ****  */
 407:Src/lwrb.c    **** size_t
 408:Src/lwrb.c    **** lwrb_get_linear_block_write_length(LWRB_VOLATILE lwrb_t* buff) {
 1249              		.loc 1 408 64 is_stmt 1 view -0
 1250              		.cfi_startproc
 1251              		@ args = 0, pretend = 0, frame = 0
 1252              		@ frame_needed = 0, uses_anonymous_args = 0
 1253              		@ link register save eliminated.
 409:Src/lwrb.c    ****     size_t w, r, len;
 1254              		.loc 1 409 5 view .LVU333
 410:Src/lwrb.c    **** 
 411:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff)) {
 412:Src/lwrb.c    ****     //     return 0;
 413:Src/lwrb.c    ****     // }
 414:Src/lwrb.c    **** 
 415:Src/lwrb.c    ****     /* Use temporary values in case they are changed during operations */
 416:Src/lwrb.c    ****     w = buff->w;
 1255              		.loc 1 416 5 view .LVU334
 1256              		.loc 1 416 7 is_stmt 0 view .LVU335
 1257 0000 0269     		ldr	r2, [r0, #16]
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 33


 1258              	.LVL126:
 417:Src/lwrb.c    ****     r = buff->r;
 1259              		.loc 1 417 5 is_stmt 1 view .LVU336
 1260              		.loc 1 417 7 is_stmt 0 view .LVU337
 1261 0002 C368     		ldr	r3, [r0, #12]
 1262              	.LVL127:
 418:Src/lwrb.c    ****     if (w >= r) {
 1263              		.loc 1 418 5 is_stmt 1 view .LVU338
 1264              		.loc 1 418 8 is_stmt 0 view .LVU339
 1265 0004 9A42     		cmp	r2, r3
 1266 0006 04D3     		bcc	.L107
 419:Src/lwrb.c    ****         len = buff->size - w;
 1267              		.loc 1 419 9 is_stmt 1 view .LVU340
 1268              		.loc 1 419 19 is_stmt 0 view .LVU341
 1269 0008 8068     		ldr	r0, [r0, #8]
 1270              	.LVL128:
 1271              		.loc 1 419 13 view .LVU342
 1272 000a 801A     		subs	r0, r0, r2
 1273              	.LVL129:
 420:Src/lwrb.c    ****         /*
 421:Src/lwrb.c    ****          * When read pointer is 0,
 422:Src/lwrb.c    ****          * maximal length is one less as if too many bytes
 423:Src/lwrb.c    ****          * are written, buffer would be considered empty again (r == w)
 424:Src/lwrb.c    ****          */
 425:Src/lwrb.c    ****         if (r == 0) {
 1274              		.loc 1 425 9 is_stmt 1 view .LVU343
 1275              		.loc 1 425 12 is_stmt 0 view .LVU344
 1276 000c 1BB9     		cbnz	r3, .L106
 426:Src/lwrb.c    ****             /*
 427:Src/lwrb.c    ****              * Cannot overflow:
 428:Src/lwrb.c    ****              * - If r is not 0, statement does not get called
 429:Src/lwrb.c    ****              * - buff->size cannot be 0 and if r is 0, len is greater 0
 430:Src/lwrb.c    ****              */
 431:Src/lwrb.c    ****             --len;
 1277              		.loc 1 431 13 is_stmt 1 view .LVU345
 1278 000e 0138     		subs	r0, r0, #1
 1279              	.LVL130:
 1280              		.loc 1 431 13 is_stmt 0 view .LVU346
 1281 0010 7047     		bx	lr
 1282              	.LVL131:
 1283              	.L107:
 432:Src/lwrb.c    ****         }
 433:Src/lwrb.c    ****     } else {
 434:Src/lwrb.c    ****         len = r - w - 1;
 1284              		.loc 1 434 9 is_stmt 1 view .LVU347
 1285              		.loc 1 434 17 is_stmt 0 view .LVU348
 1286 0012 9B1A     		subs	r3, r3, r2
 1287              	.LVL132:
 1288              		.loc 1 434 13 view .LVU349
 1289 0014 581E     		subs	r0, r3, #1
 1290              	.LVL133:
 435:Src/lwrb.c    ****     }
 436:Src/lwrb.c    ****     return len;
 1291              		.loc 1 436 5 is_stmt 1 view .LVU350
 1292              	.L106:
 437:Src/lwrb.c    **** }
 1293              		.loc 1 437 1 is_stmt 0 view .LVU351
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 34


 1294 0016 7047     		bx	lr
 1295              		.cfi_endproc
 1296              	.LFE14:
 1298              		.section	.text.lwrb_advance,"ax",%progbits
 1299              		.align	1
 1300              		.global	lwrb_advance
 1301              		.syntax unified
 1302              		.thumb
 1303              		.thumb_func
 1304              		.fpu softvfp
 1306              	lwrb_advance:
 1307              	.LVL134:
 1308              	.LFB15:
 438:Src/lwrb.c    **** 
 439:Src/lwrb.c    **** /**
 440:Src/lwrb.c    ****  * \brief           Advance write pointer in the buffer.
 441:Src/lwrb.c    ****  * Similar to skip function but modifies write pointer instead of read
 442:Src/lwrb.c    ****  *
 443:Src/lwrb.c    ****  * \note            Useful when hardware is writing to buffer and application needs to increase num
 444:Src/lwrb.c    ****  *                      of bytes written to buffer by hardware
 445:Src/lwrb.c    ****  * \param[in]       buff: Buffer handle
 446:Src/lwrb.c    ****  * \param[in]       len: Number of bytes to advance
 447:Src/lwrb.c    ****  * \return          Number of bytes advanced for write operation
 448:Src/lwrb.c    ****  */
 449:Src/lwrb.c    **** size_t
 450:Src/lwrb.c    **** lwrb_advance(LWRB_VOLATILE lwrb_t* buff, size_t len) {
 1309              		.loc 1 450 54 is_stmt 1 view -0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 0
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
 1313              		.loc 1 450 54 is_stmt 0 view .LVU353
 1314 0000 38B5     		push	{r3, r4, r5, lr}
 1315              	.LCFI5:
 1316              		.cfi_def_cfa_offset 16
 1317              		.cfi_offset 3, -16
 1318              		.cfi_offset 4, -12
 1319              		.cfi_offset 5, -8
 1320              		.cfi_offset 14, -4
 1321 0002 0446     		mov	r4, r0
 1322 0004 0D46     		mov	r5, r1
 451:Src/lwrb.c    ****     size_t free;
 1323              		.loc 1 451 5 is_stmt 1 view .LVU354
 452:Src/lwrb.c    **** 
 453:Src/lwrb.c    ****     // if (!BUF_IS_VALID(buff) || len == 0) {
 454:Src/lwrb.c    ****     //     return 0;
 455:Src/lwrb.c    ****     // }
 456:Src/lwrb.c    **** 
 457:Src/lwrb.c    ****     free = lwrb_get_free(buff);
 1324              		.loc 1 457 5 view .LVU355
 1325              		.loc 1 457 12 is_stmt 0 view .LVU356
 1326 0006 FFF7FEFF 		bl	lwrb_get_free
 1327              	.LVL135:
 458:Src/lwrb.c    ****     len = BUF_MIN(len, free);
 1328              		.loc 1 458 5 is_stmt 1 view .LVU357
 1329              		.loc 1 458 9 is_stmt 0 view .LVU358
 1330 000a 8542     		cmp	r5, r0
 1331 000c 28BF     		it	cs
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 35


 1332 000e 0546     		movcs	r5, r0
 1333              	.LVL136:
 459:Src/lwrb.c    ****     buff->w += len;
 1334              		.loc 1 459 5 is_stmt 1 view .LVU359
 1335              		.loc 1 459 13 is_stmt 0 view .LVU360
 1336 0010 2369     		ldr	r3, [r4, #16]
 1337 0012 2B44     		add	r3, r3, r5
 1338 0014 2361     		str	r3, [r4, #16]
 460:Src/lwrb.c    ****     if (buff->w >= buff->size) {
 1339              		.loc 1 460 5 is_stmt 1 view .LVU361
 1340              		.loc 1 460 24 is_stmt 0 view .LVU362
 1341 0016 A268     		ldr	r2, [r4, #8]
 1342              		.loc 1 460 8 view .LVU363
 1343 0018 9342     		cmp	r3, r2
 1344 001a 01D3     		bcc	.L110
 461:Src/lwrb.c    ****         buff->w -= buff->size;
 1345              		.loc 1 461 9 is_stmt 1 view .LVU364
 1346              		.loc 1 461 17 is_stmt 0 view .LVU365
 1347 001c 9B1A     		subs	r3, r3, r2
 1348 001e 2361     		str	r3, [r4, #16]
 1349              	.L110:
 462:Src/lwrb.c    ****     }
 463:Src/lwrb.c    ****     BUF_SEND_EVT(buff, LWRB_EVT_WRITE, len);
 1350              		.loc 1 463 5 is_stmt 1 view .LVU366
 1351              		.loc 1 463 5 view .LVU367
 1352 0020 6369     		ldr	r3, [r4, #20]
 1353 0022 1BB1     		cbz	r3, .L109
 1354              		.loc 1 463 5 discriminator 1 view .LVU368
 1355 0024 2A46     		mov	r2, r5
 1356 0026 0121     		movs	r1, #1
 1357 0028 2046     		mov	r0, r4
 1358              	.LVL137:
 1359              		.loc 1 463 5 is_stmt 0 discriminator 1 view .LVU369
 1360 002a 9847     		blx	r3
 1361              	.LVL138:
 1362              		.loc 1 463 5 is_stmt 1 discriminator 1 view .LVU370
 464:Src/lwrb.c    ****     return len;
 1363              		.loc 1 464 5 discriminator 1 view .LVU371
 1364              	.L109:
 465:Src/lwrb.c    **** }...
 1365              		.loc 1 465 1 is_stmt 0 view .LVU372
 1366 002c 2846     		mov	r0, r5
 1367 002e 38BD     		pop	{r3, r4, r5, pc}
 1368              		.loc 1 465 1 view .LVU373
 1369              		.cfi_endproc
 1370              	.LFE15:
 1372              		.text
 1373              	.Letext0:
 1374              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\lib\\gcc\\arm-none-eabi
 1375              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1376              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1377              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1378              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1379              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 1380              		.file 8 "Inc/lwrb.h"
 1381              		.file 9 "<built-in>"
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s 			page 36


DEFINED SYMBOLS
                            *ABS*:00000000 lwrb.c
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:16     .text.lwrb_init:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:24     .text.lwrb_init:00000000 lwrb_init
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:92     .text.lwrb_init:0000002c $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:98     .text.lwrb_is_ready:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:105    .text.lwrb_is_ready:00000000 lwrb_is_ready
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:175    .text.lwrb_is_ready:00000034 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:181    .text.lwrb_free:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:188    .text.lwrb_free:00000000 lwrb_free
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:230    .text.lwrb_free:00000028 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:236    .text.lwrb_set_evt_fn:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:243    .text.lwrb_set_evt_fn:00000000 lwrb_set_evt_fn
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:287    .text.lwrb_set_evt_fn:00000028 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:293    .text.lwrb_get_free:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:300    .text.lwrb_get_free:00000000 lwrb_get_free
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:362    .text.lwrb_write:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:369    .text.lwrb_write:00000000 lwrb_write
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:549    .text.lwrb_write:000000b4 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:555    .text.lwrb_get_full:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:562    .text.lwrb_get_full:00000000 lwrb_get_full
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:618    .text.lwrb_read:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:625    .text.lwrb_read:00000000 lwrb_read
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:743    .text.lwrb_peek:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:750    .text.lwrb_peek:00000000 lwrb_peek
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:922    .text.lwrb_peek:000000a4 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:928    .text.lwrb_reset:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:935    .text.lwrb_reset:00000000 lwrb_reset
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:994    .text.lwrb_reset:00000034 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1000   .text.lwrb_get_linear_block_read_address:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1007   .text.lwrb_get_linear_block_read_address:00000000 lwrb_get_linear_block_read_address
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1070   .text.lwrb_get_linear_block_read_address:00000030 $d
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1076   .text.lwrb_get_linear_block_read_length:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1083   .text.lwrb_get_linear_block_read_length:00000000 lwrb_get_linear_block_read_length
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1137   .text.lwrb_skip:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1144   .text.lwrb_skip:00000000 lwrb_skip
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1211   .text.lwrb_get_linear_block_write_address:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1218   .text.lwrb_get_linear_block_write_address:00000000 lwrb_get_linear_block_write_address
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1239   .text.lwrb_get_linear_block_write_length:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1246   .text.lwrb_get_linear_block_write_length:00000000 lwrb_get_linear_block_write_length
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1299   .text.lwrb_advance:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cce5oPGU.s:1306   .text.lwrb_advance:00000000 lwrb_advance

UNDEFINED SYMBOLS
memcpy
