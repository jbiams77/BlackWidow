ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"dwt_delay.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.DWT_Init,"ax",%progbits
  16              		.align	1
  17              		.global	DWT_Init
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	DWT_Init:
  25              	.LFB65:
  26              		.file 1 "Src/dwt_delay.c"
   1:Src/dwt_delay.c **** 
   2:Src/dwt_delay.c **** /*
   3:Src/dwt_delay.c ****  * Simple microseconds delay routine, utilizing ARM's DWT
   4:Src/dwt_delay.c ****  * (Data Watchpoint and Trace Unit) and HAL library.
   5:Src/dwt_delay.c ****  * Intended to use with gcc compiler, but I hope it can be used
   6:Src/dwt_delay.c ****  * with any other C compiler across the Universe (provided that
   7:Src/dwt_delay.c ****  * ARM and CMSIS already invented) :)
   8:Src/dwt_delay.c ****  * Max K
   9:Src/dwt_delay.c ****  *
  10:Src/dwt_delay.c ****  *
  11:Src/dwt_delay.c ****  * This file is part of DWT_Delay package.
  12:Src/dwt_delay.c ****  * DWT_Delay is free software: you can redistribute it and/or modify it
  13:Src/dwt_delay.c ****  * under the terms of the GNU General Public License as published by
  14:Src/dwt_delay.c ****  * the Free Software Foundation, either version 3 of the License,
  15:Src/dwt_delay.c ****  * or (at your option) any later version.
  16:Src/dwt_delay.c ****  *
  17:Src/dwt_delay.c ****  * us_delay is distributed in the hope that it will be useful,
  18:Src/dwt_delay.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty
  19:Src/dwt_delay.c ****  * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
  20:Src/dwt_delay.c ****  * the GNU General Public License for more details.
  21:Src/dwt_delay.c ****  * http://www.gnu.org/licenses/.
  22:Src/dwt_delay.c ****  */
  23:Src/dwt_delay.c **** 
  24:Src/dwt_delay.c **** #include "stm32f1xx_hal.h"          // change to whatever MCU you use
  25:Src/dwt_delay.c **** #include "dwt_delay.h"
  26:Src/dwt_delay.c **** 
  27:Src/dwt_delay.c **** /**
  28:Src/dwt_delay.c ****  * Initialization routine.
  29:Src/dwt_delay.c ****  * You might need to enable access to DWT registers on Cortex-M7
  30:Src/dwt_delay.c ****  *   DWT->LAR = 0xC5ACCE55
  31:Src/dwt_delay.c ****  */
  32:Src/dwt_delay.c **** void DWT_Init(void)
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s 			page 2


  33:Src/dwt_delay.c **** {   
  27              		.loc 1 33 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  34:Src/dwt_delay.c ****      /* Disable TRC */
  35:Src/dwt_delay.c ****     CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
  32              		.loc 1 35 5 view .LVU1
  33              		.loc 1 35 22 is_stmt 0 view .LVU2
  34 0000 0C4B     		ldr	r3, .L2
  35 0002 DA68     		ldr	r2, [r3, #12]
  36 0004 22F08072 		bic	r2, r2, #16777216
  37 0008 DA60     		str	r2, [r3, #12]
  36:Src/dwt_delay.c ****     /* Enable TRC */
  37:Src/dwt_delay.c ****     CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
  38              		.loc 1 37 5 is_stmt 1 view .LVU3
  39              		.loc 1 37 22 is_stmt 0 view .LVU4
  40 000a DA68     		ldr	r2, [r3, #12]
  41 000c 42F08072 		orr	r2, r2, #16777216
  42 0010 DA60     		str	r2, [r3, #12]
  38:Src/dwt_delay.c ****     /* Disable clock cycle counter */
  39:Src/dwt_delay.c ****     DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
  43              		.loc 1 39 5 is_stmt 1 view .LVU5
  44              		.loc 1 39 15 is_stmt 0 view .LVU6
  45 0012 094B     		ldr	r3, .L2+4
  46 0014 1A68     		ldr	r2, [r3]
  47 0016 22F00102 		bic	r2, r2, #1
  48 001a 1A60     		str	r2, [r3]
  40:Src/dwt_delay.c ****     /* Enable  clock cycle counter */
  41:Src/dwt_delay.c ****     DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
  49              		.loc 1 41 5 is_stmt 1 view .LVU7
  50              		.loc 1 41 15 is_stmt 0 view .LVU8
  51 001c 1A68     		ldr	r2, [r3]
  52 001e 42F00102 		orr	r2, r2, #1
  53 0022 1A60     		str	r2, [r3]
  42:Src/dwt_delay.c ****     /* Reset the clock cycle counter value */
  43:Src/dwt_delay.c ****     DWT->CYCCNT = 0;
  54              		.loc 1 43 5 is_stmt 1 view .LVU9
  55              		.loc 1 43 17 is_stmt 0 view .LVU10
  56 0024 0022     		movs	r2, #0
  57 0026 5A60     		str	r2, [r3, #4]
  44:Src/dwt_delay.c ****     /* 3 NO OPERATION instructions */
  45:Src/dwt_delay.c ****     __ASM volatile ("NOP");
  58              		.loc 1 45 5 is_stmt 1 view .LVU11
  59              		.syntax unified
  60              	@ 45 "Src/dwt_delay.c" 1
  61 0028 00BF     		NOP
  62              	@ 0 "" 2
  46:Src/dwt_delay.c ****     __ASM volatile ("NOP");
  63              		.loc 1 46 5 view .LVU12
  64              	@ 46 "Src/dwt_delay.c" 1
  65 002a 00BF     		NOP
  66              	@ 0 "" 2
  47:Src/dwt_delay.c ****     __ASM volatile ("NOP");
  67              		.loc 1 47 5 view .LVU13
  68              	@ 47 "Src/dwt_delay.c" 1
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s 			page 3


  69 002c 00BF     		NOP
  70              	@ 0 "" 2
  48:Src/dwt_delay.c ****     /* Check if clock cycle counter has started */
  49:Src/dwt_delay.c ****     if(DWT->CYCCNT)
  71              		.loc 1 49 5 view .LVU14
  72              		.loc 1 49 11 is_stmt 0 view .LVU15
  73              		.thumb
  74              		.syntax unified
  75 002e 5B68     		ldr	r3, [r3, #4]
  50:Src/dwt_delay.c ****     {
  51:Src/dwt_delay.c ****        return 0; /*clock cycle counter started*/
  52:Src/dwt_delay.c ****     }
  53:Src/dwt_delay.c ****     else
  54:Src/dwt_delay.c ****     {
  55:Src/dwt_delay.c ****       return 1; /*clock cycle counter not started*/
  56:Src/dwt_delay.c ****     } 
  57:Src/dwt_delay.c ****     
  58:Src/dwt_delay.c **** }
  76              		.loc 1 58 1 view .LVU16
  77 0030 7047     		bx	lr
  78              	.L3:
  79 0032 00BF     		.align	2
  80              	.L2:
  81 0034 F0ED00E0 		.word	-536810000
  82 0038 001000E0 		.word	-536866816
  83              		.cfi_endproc
  84              	.LFE65:
  86              		.section	.text.DWT_Delay,"ax",%progbits
  87              		.align	1
  88              		.global	DWT_Delay
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	DWT_Delay:
  95              	.LVL0:
  96              	.LFB66:
  59:Src/dwt_delay.c **** 
  60:Src/dwt_delay.c **** #if DWT_DELAY_NEWBIE
  61:Src/dwt_delay.c **** /**
  62:Src/dwt_delay.c ****  * If you are a newbie and see magic in DWT_Delay, consider this more
  63:Src/dwt_delay.c ****  * illustrative function, where you explicitly determine a counter
  64:Src/dwt_delay.c ****  * value when delay should stop while keeping things in bounds of uint32.
  65:Src/dwt_delay.c **** */
  66:Src/dwt_delay.c **** void DWT_Delay(uint32_t us) // microseconds
  67:Src/dwt_delay.c **** {
  68:Src/dwt_delay.c ****     uint32_t startTick  = DWT->CYCCNT,
  69:Src/dwt_delay.c ****              targetTick = DWT->CYCCNT + us * (SystemCoreClock/1000000);
  70:Src/dwt_delay.c **** 
  71:Src/dwt_delay.c ****     // Must check if target tick is out of bounds and overflowed
  72:Src/dwt_delay.c ****     if (targetTick > startTick) {
  73:Src/dwt_delay.c ****         // Not overflowed
  74:Src/dwt_delay.c ****         while (DWT->CYCCNT < targetTick);
  75:Src/dwt_delay.c ****     } else {
  76:Src/dwt_delay.c ****         // Overflowed
  77:Src/dwt_delay.c ****         while (DWT->CYCCNT > startTick || DWT->CYCCNT < targetTick);
  78:Src/dwt_delay.c ****     }
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s 			page 4


  79:Src/dwt_delay.c **** }
  80:Src/dwt_delay.c **** #else
  81:Src/dwt_delay.c **** /**
  82:Src/dwt_delay.c ****  * Delay routine itself.
  83:Src/dwt_delay.c ****  * Time is in microseconds (1/1000000th of a second), not to be
  84:Src/dwt_delay.c ****  * confused with millisecond (1/1000th).
  85:Src/dwt_delay.c ****  *
  86:Src/dwt_delay.c ****  * No need to check an overflow. Let it just tick :)
  87:Src/dwt_delay.c ****  *
  88:Src/dwt_delay.c ****  * @param uint32_t us  Number of microseconds to delay for
  89:Src/dwt_delay.c ****  */
  90:Src/dwt_delay.c **** void DWT_Delay(volatile uint32_t au32_microseconds) // microseconds
  91:Src/dwt_delay.c **** {
  97              		.loc 1 91 1 is_stmt 1 view -0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 8
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		.loc 1 91 1 is_stmt 0 view .LVU18
 102 0000 10B5     		push	{r4, lr}
 103              	.LCFI0:
 104              		.cfi_def_cfa_offset 8
 105              		.cfi_offset 4, -8
 106              		.cfi_offset 14, -4
 107 0002 82B0     		sub	sp, sp, #8
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 16
 110 0004 0190     		str	r0, [sp, #4]
  92:Src/dwt_delay.c ****     uint32_t au32_initial_ticks = DWT->CYCCNT;
 111              		.loc 1 92 5 is_stmt 1 view .LVU19
 112              		.loc 1 92 14 is_stmt 0 view .LVU20
 113 0006 0A4B     		ldr	r3, .L7
 114 0008 5C68     		ldr	r4, [r3, #4]
 115              	.LVL1:
  93:Src/dwt_delay.c ****   uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 116              		.loc 1 93 3 is_stmt 1 view .LVU21
 117              		.loc 1 93 26 is_stmt 0 view .LVU22
 118 000a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 119              	.LVL2:
 120              		.loc 1 93 12 view .LVU23
 121 000e 0949     		ldr	r1, .L7+4
 122 0010 A1FB0031 		umull	r3, r1, r1, r0
 123 0014 890C     		lsrs	r1, r1, #18
 124              	.LVL3:
  94:Src/dwt_delay.c ****   au32_microseconds *= au32_ticks;
 125              		.loc 1 94 3 is_stmt 1 view .LVU24
 126              		.loc 1 94 21 is_stmt 0 view .LVU25
 127 0016 019B     		ldr	r3, [sp, #4]
 128 0018 01FB03F3 		mul	r3, r1, r3
 129 001c 0193     		str	r3, [sp, #4]
 130              	.LVL4:
  95:Src/dwt_delay.c ****   while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 131              		.loc 1 95 3 is_stmt 1 view .LVU26
 132              	.L5:
 133              		.loc 1 95 76 discriminator 1 view .LVU27
 134              		.loc 1 95 9 discriminator 1 view .LVU28
 135              		.loc 1 95 14 is_stmt 0 discriminator 1 view .LVU29
 136 001e 044B     		ldr	r3, .L7
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s 			page 5


 137 0020 5A68     		ldr	r2, [r3, #4]
 138              		.loc 1 95 23 discriminator 1 view .LVU30
 139 0022 121B     		subs	r2, r2, r4
 140              		.loc 1 95 64 discriminator 1 view .LVU31
 141 0024 019B     		ldr	r3, [sp, #4]
 142 0026 5B1A     		subs	r3, r3, r1
 143              		.loc 1 95 9 discriminator 1 view .LVU32
 144 0028 9A42     		cmp	r2, r3
 145 002a F8D3     		bcc	.L5
  96:Src/dwt_delay.c **** }
 146              		.loc 1 96 1 view .LVU33
 147 002c 02B0     		add	sp, sp, #8
 148              	.LCFI2:
 149              		.cfi_def_cfa_offset 8
 150              		@ sp needed
 151 002e 10BD     		pop	{r4, pc}
 152              	.LVL5:
 153              	.L8:
 154              		.loc 1 96 1 view .LVU34
 155              		.align	2
 156              	.L7:
 157 0030 001000E0 		.word	-536866816
 158 0034 83DE1B43 		.word	1125899907
 159              		.cfi_endproc
 160              	.LFE66:
 162              		.text
 163              	.Letext0:
 164              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 165              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\9 2019-q4-major\\arm-none-eabi\\include\
 166              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 167              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 168              		.file 6 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 169              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_rcc.h"
ARM GAS  C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 dwt_delay.c
C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s:16     .text.DWT_Init:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s:24     .text.DWT_Init:00000000 DWT_Init
C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s:81     .text.DWT_Init:00000034 $d
C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s:87     .text.DWT_Delay:00000000 $t
C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s:94     .text.DWT_Delay:00000000 DWT_Delay
C:\Users\Brandon\AppData\Local\Temp\cc69qeu4.s:157    .text.DWT_Delay:00000030 $d

UNDEFINED SYMBOLS
HAL_RCC_GetHCLKFreq
